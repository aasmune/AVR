
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000702  00800100  0000070e  000007a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800802  00800802  00000ea4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ec  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000362  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000408  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027b  00000000  00000000  000021ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000633  00000000  00000000  00002427  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002a5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	18 e0       	ldi	r17, 0x08	; 8
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee e0       	ldi	r30, 0x0E	; 14
  e0:	f7 e0       	ldi	r31, 0x07	; 7
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a2 30       	cpi	r26, 0x02	; 2
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	28 e0       	ldi	r18, 0x08	; 8
  f0:	a2 e0       	ldi	r26, 0x02	; 2
  f2:	b8 e0       	ldi	r27, 0x08	; 8
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a6 30       	cpi	r26, 0x06	; 6
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 72 03 	call	0x6e4	; 0x6e4 <main>
 102:	0c 94 85 03 	jmp	0x70a	; 0x70a <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <DISP_set_mode>:
}

// mode: 1 = data, 0 = cmd
void DISP_set_mode(bool mode)
{
    if(mode)
 10a:	88 23       	and	r24, r24
 10c:	11 f0       	breq	.+4      	; 0x112 <DISP_set_mode+0x8>
    {
        DSP_MODE_PORT |= (1 << DSP_MODE_BIT);
 10e:	12 9a       	sbi	0x02, 2	; 2
 110:	08 95       	ret
    }
    else
    {
        DSP_MODE_PORT &= ~(1 << DSP_MODE_BIT);
 112:	12 98       	cbi	0x02, 2	; 2
 114:	08 95       	ret

00000116 <DISP_transmit_cmd>:
        }
    }
}

void DISP_transmit_cmd(uint8_t cmd)
{
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
    DISP_set_mode(0);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 85 00 	call	0x10a	; 0x10a <DISP_set_mode>
    SPI_MasterTransmit(cmd);
 120:	8c 2f       	mov	r24, r28
 122:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_MasterTransmit>
}
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <DISP_transmit_data>:

void DISP_transmit_data(uint8_t data)
{
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
    DISP_set_mode(1);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 85 00 	call	0x10a	; 0x10a <DISP_set_mode>
    SPI_MasterTransmit(data);
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_MasterTransmit>
}
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <DISP_putc>:
        str++;
    }
}

void DISP_putc(char c)
{
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
    char* d = 0;
    if(c == '\n')
 146:	8a 30       	cpi	r24, 0x0A	; 10
 148:	d1 f4       	brne	.+52     	; 0x17e <DISP_putc+0x40>
    {
        if(cursor_col == 0)
 14a:	80 91 02 08 	lds	r24, 0x0802
 14e:	90 91 03 08 	lds	r25, 0x0803
 152:	89 2b       	or	r24, r25
 154:	51 f4       	brne	.+20     	; 0x16a <DISP_putc+0x2c>
        {
            DISP_putc(' ');
 156:	80 e2       	ldi	r24, 0x20	; 32
 158:	0e 94 9f 00 	call	0x13e	; 0x13e <DISP_putc>
        }

        while(cursor_col != 0)
 15c:	80 91 02 08 	lds	r24, 0x0802
 160:	90 91 03 08 	lds	r25, 0x0803
 164:	89 2b       	or	r24, r25
 166:	09 f4       	brne	.+2      	; 0x16a <DISP_putc+0x2c>
 168:	e1 c0       	rjmp	.+450    	; 0x32c <DISP_putc+0x1ee>
        {
            DISP_putc(' ');
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	0e 94 9f 00 	call	0x13e	; 0x13e <DISP_putc>
        if(cursor_col == 0)
        {
            DISP_putc(' ');
        }

        while(cursor_col != 0)
 170:	80 91 02 08 	lds	r24, 0x0802
 174:	90 91 03 08 	lds	r25, 0x0803
 178:	89 2b       	or	r24, r25
 17a:	b9 f7       	brne	.-18     	; 0x16a <DISP_putc+0x2c>
 17c:	d7 c0       	rjmp	.+430    	; 0x32c <DISP_putc+0x1ee>
            DISP_putc(' ');
        }
        return;
    }
    //else if(c == '\t'){ }
    else if(c < 0x20)
 17e:	80 32       	cpi	r24, 0x20	; 32
 180:	08 f4       	brcc	.+2      	; 0x184 <DISP_putc+0x46>
 182:	d4 c0       	rjmp	.+424    	; 0x32c <DISP_putc+0x1ee>
    {
        return;
    }
    else if(c < 0x7F)
 184:	8f 37       	cpi	r24, 0x7F	; 127
 186:	58 f4       	brcc	.+22     	; 0x19e <DISP_putc+0x60>
    {
        d = font8x8_basic[(int)c - 0x20];
 188:	08 2f       	mov	r16, r24
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	00 0f       	add	r16, r16
 18e:	11 1f       	adc	r17, r17
 190:	00 0f       	add	r16, r16
 192:	11 1f       	adc	r17, r17
 194:	00 0f       	add	r16, r16
 196:	11 1f       	adc	r17, r17
 198:	00 50       	subi	r16, 0x00	; 0
 19a:	1e 4f       	sbci	r17, 0xFE	; 254
 19c:	12 c0       	rjmp	.+36     	; 0x1c2 <DISP_putc+0x84>
    }
    else if(c < 0xA0)
 19e:	80 3a       	cpi	r24, 0xA0	; 160
 1a0:	08 f4       	brcc	.+2      	; 0x1a4 <DISP_putc+0x66>
 1a2:	c4 c0       	rjmp	.+392    	; 0x32c <DISP_putc+0x1ee>
    {
        return;
    }
    else if(c > 0xC0)
 1a4:	81 3c       	cpi	r24, 0xC1	; 193
 1a6:	58 f0       	brcs	.+22     	; 0x1be <DISP_putc+0x80>
    {
        d = font8x8_ext_latin[(int)c - 0xc0];
 1a8:	08 2f       	mov	r16, r24
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	00 0f       	add	r16, r16
 1ae:	11 1f       	adc	r17, r17
 1b0:	00 0f       	add	r16, r16
 1b2:	11 1f       	adc	r17, r17
 1b4:	00 0f       	add	r16, r16
 1b6:	11 1f       	adc	r17, r17
 1b8:	00 50       	subi	r16, 0x00	; 0
 1ba:	15 40       	sbci	r17, 0x05	; 5
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DISP_putc+0x84>
    }
}

void DISP_putc(char c)
{
    char* d = 0;
 1be:	00 e0       	ldi	r16, 0x00	; 0
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
        db |= (((d[2] >> b) & 0x1) << 2);
        db |= (((d[3] >> b) & 0x1) << 3);
        db |= (((d[4] >> b) & 0x1) << 4);
        db |= (((d[5] >> b) & 0x1) << 5);
        db |= (((d[6] >> b) & 0x1) << 6);
        db |= (((d[7] >> b) & 0x1) << 7);
 1c6:	f8 01       	movw	r30, r16
 1c8:	a7 81       	ldd	r26, Z+7	; 0x07
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	0c 2e       	mov	r0, r28
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DISP_putc+0x96>
 1d0:	b5 95       	asr	r27
 1d2:	a7 95       	ror	r26
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DISP_putc+0x92>
 1d8:	b6 95       	lsr	r27
 1da:	ba 2f       	mov	r27, r26
 1dc:	aa 27       	eor	r26, r26
 1de:	b7 95       	ror	r27
 1e0:	a7 95       	ror	r26
    }

    for(uint8_t b = 0; b < 8; b++)
    {
        uint8_t db = 0;
        db |= (((d[0] >> b) & 0x1) << 0);
 1e2:	f8 01       	movw	r30, r16
 1e4:	40 81       	ld	r20, Z
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	0c 2e       	mov	r0, r28
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DISP_putc+0xb2>
 1ec:	55 95       	asr	r21
 1ee:	47 95       	ror	r20
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DISP_putc+0xae>
 1f4:	41 70       	andi	r20, 0x01	; 1
 1f6:	4a 2b       	or	r20, r26
        db |= (((d[1] >> b) & 0x1) << 1);
 1f8:	f8 01       	movw	r30, r16
 1fa:	91 81       	ldd	r25, Z+1	; 0x01
 1fc:	e9 2f       	mov	r30, r25
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	0c 2e       	mov	r0, r28
 202:	02 c0       	rjmp	.+4      	; 0x208 <DISP_putc+0xca>
 204:	f5 95       	asr	r31
 206:	e7 95       	ror	r30
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DISP_putc+0xc6>
 20c:	e1 70       	andi	r30, 0x01	; 1
 20e:	ff 27       	eor	r31, r31
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	4e 2b       	or	r20, r30
        db |= (((d[2] >> b) & 0x1) << 2);
 216:	f8 01       	movw	r30, r16
 218:	92 81       	ldd	r25, Z+2	; 0x02
 21a:	69 2f       	mov	r22, r25
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	0c 2e       	mov	r0, r28
 220:	02 c0       	rjmp	.+4      	; 0x226 <DISP_putc+0xe8>
 222:	75 95       	asr	r23
 224:	67 95       	ror	r22
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <DISP_putc+0xe4>
 22a:	61 70       	andi	r22, 0x01	; 1
 22c:	77 27       	eor	r23, r23
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	46 2b       	or	r20, r22
        db |= (((d[3] >> b) & 0x1) << 3);
 238:	93 81       	ldd	r25, Z+3	; 0x03
 23a:	89 2f       	mov	r24, r25
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0c 2e       	mov	r0, r28
 240:	02 c0       	rjmp	.+4      	; 0x246 <DISP_putc+0x108>
 242:	95 95       	asr	r25
 244:	87 95       	ror	r24
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DISP_putc+0x104>
 24a:	81 70       	andi	r24, 0x01	; 1
 24c:	99 27       	eor	r25, r25
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	24 2f       	mov	r18, r20
 25c:	28 2b       	or	r18, r24
        db |= (((d[4] >> b) & 0x1) << 4);
 25e:	94 81       	ldd	r25, Z+4	; 0x04
 260:	49 2f       	mov	r20, r25
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	0c 2e       	mov	r0, r28
 266:	02 c0       	rjmp	.+4      	; 0x26c <DISP_putc+0x12e>
 268:	55 95       	asr	r21
 26a:	47 95       	ror	r20
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DISP_putc+0x12a>
 270:	41 70       	andi	r20, 0x01	; 1
 272:	55 27       	eor	r21, r21
 274:	42 95       	swap	r20
 276:	52 95       	swap	r21
 278:	50 7f       	andi	r21, 0xF0	; 240
 27a:	54 27       	eor	r21, r20
 27c:	40 7f       	andi	r20, 0xF0	; 240
 27e:	54 27       	eor	r21, r20
 280:	42 2b       	or	r20, r18
        db |= (((d[5] >> b) & 0x1) << 5);
 282:	f8 01       	movw	r30, r16
 284:	95 81       	ldd	r25, Z+5	; 0x05
 286:	29 2f       	mov	r18, r25
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	0c 2e       	mov	r0, r28
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DISP_putc+0x154>
 28e:	35 95       	asr	r19
 290:	27 95       	ror	r18
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <DISP_putc+0x150>
 296:	21 70       	andi	r18, 0x01	; 1
 298:	33 27       	eor	r19, r19
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	22 95       	swap	r18
 2a0:	32 95       	swap	r19
 2a2:	30 7f       	andi	r19, 0xF0	; 240
 2a4:	32 27       	eor	r19, r18
 2a6:	20 7f       	andi	r18, 0xF0	; 240
 2a8:	32 27       	eor	r19, r18
 2aa:	24 2b       	or	r18, r20
        db |= (((d[6] >> b) & 0x1) << 6);
 2ac:	f8 01       	movw	r30, r16
 2ae:	86 81       	ldd	r24, Z+6	; 0x06
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0c 2e       	mov	r0, r28
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DISP_putc+0x17c>
 2b6:	95 95       	asr	r25
 2b8:	87 95       	ror	r24
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DISP_putc+0x178>
 2be:	81 70       	andi	r24, 0x01	; 1
 2c0:	99 27       	eor	r25, r25
 2c2:	00 24       	eor	r0, r0
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	07 94       	ror	r0
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	07 94       	ror	r0
 2d0:	98 2f       	mov	r25, r24
 2d2:	80 2d       	mov	r24, r0
        db |= (((d[7] >> b) & 0x1) << 7);

        DISP_transmit_data(db);
 2d4:	82 2b       	or	r24, r18
 2d6:	0e 94 95 00 	call	0x12a	; 0x12a <DISP_transmit_data>
 2da:	21 96       	adiw	r28, 0x01	; 1
    else if(c > 0xC0)
    {
        d = font8x8_ext_latin[(int)c - 0xc0];
    }

    for(uint8_t b = 0; b < 8; b++)
 2dc:	c8 30       	cpi	r28, 0x08	; 8
 2de:	d1 05       	cpc	r29, r1
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <DISP_putc+0x1a6>
 2e2:	71 cf       	rjmp	.-286    	; 0x1c6 <DISP_putc+0x88>
        db |= (((d[7] >> b) & 0x1) << 7);

        DISP_transmit_data(db);
    }

    cursor_col++;
 2e4:	80 91 02 08 	lds	r24, 0x0802
 2e8:	90 91 03 08 	lds	r25, 0x0803
 2ec:	01 96       	adiw	r24, 0x01	; 1
    cursor_col %= 16;
 2ee:	8f 70       	andi	r24, 0x0F	; 15
 2f0:	90 78       	andi	r25, 0x80	; 128
 2f2:	99 23       	and	r25, r25
 2f4:	24 f4       	brge	.+8      	; 0x2fe <DISP_putc+0x1c0>
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	80 6f       	ori	r24, 0xF0	; 240
 2fa:	9f 6f       	ori	r25, 0xFF	; 255
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	90 93 03 08 	sts	0x0803, r25
 302:	80 93 02 08 	sts	0x0802, r24

    if(cursor_col == 0)
 306:	89 2b       	or	r24, r25
 308:	89 f4       	brne	.+34     	; 0x32c <DISP_putc+0x1ee>
    {
        cursor_row++;
 30a:	80 91 04 08 	lds	r24, 0x0804
 30e:	90 91 05 08 	lds	r25, 0x0805
 312:	01 96       	adiw	r24, 0x01	; 1
        cursor_row %= 4;
 314:	83 70       	andi	r24, 0x03	; 3
 316:	90 78       	andi	r25, 0x80	; 128
 318:	99 23       	and	r25, r25
 31a:	24 f4       	brge	.+8      	; 0x324 <DISP_putc+0x1e6>
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	8c 6f       	ori	r24, 0xFC	; 252
 320:	9f 6f       	ori	r25, 0xFF	; 255
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	90 93 05 08 	sts	0x0805, r25
 328:	80 93 04 08 	sts	0x0804, r24
    }
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	08 95       	ret

00000336 <DISP_print>:

int cursor_row = 0;
int cursor_col = 0;

void DISP_print(const char* str)
{
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	ec 01       	movw	r28, r24
    while(*str != '\0')
 33c:	88 81       	ld	r24, Y
 33e:	88 23       	and	r24, r24
 340:	31 f0       	breq	.+12     	; 0x34e <DISP_print+0x18>
 342:	21 96       	adiw	r28, 0x01	; 1
    {
        DISP_putc(*str);
 344:	0e 94 9f 00 	call	0x13e	; 0x13e <DISP_putc>
int cursor_row = 0;
int cursor_col = 0;

void DISP_print(const char* str)
{
    while(*str != '\0')
 348:	89 91       	ld	r24, Y+
 34a:	81 11       	cpse	r24, r1
 34c:	fb cf       	rjmp	.-10     	; 0x344 <DISP_print+0xe>
    {
        DISP_putc(*str);
        str++;
    }
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <DISP_clear>:
        cursor_row %= 4;
    }
}

void DISP_clear()
{
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
    if(cursor_row == 0)
 358:	80 91 04 08 	lds	r24, 0x0804
 35c:	90 91 05 08 	lds	r25, 0x0805
 360:	89 2b       	or	r24, r25
 362:	51 f4       	brne	.+20     	; 0x378 <DISP_clear+0x24>
    {
        DISP_print("\n");
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	98 e0       	ldi	r25, 0x08	; 8
 368:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
    }
    while(cursor_row != 0)
 36c:	80 91 04 08 	lds	r24, 0x0804
 370:	90 91 05 08 	lds	r25, 0x0805
 374:	89 2b       	or	r24, r25
 376:	89 f0       	breq	.+34     	; 0x39a <DISP_clear+0x46>
    {
        DISP_print("\n");
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	98 e0       	ldi	r25, 0x08	; 8
 37c:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
{
    if(cursor_row == 0)
    {
        DISP_print("\n");
    }
    while(cursor_row != 0)
 380:	80 91 04 08 	lds	r24, 0x0804
 384:	90 91 05 08 	lds	r25, 0x0805
 388:	89 2b       	or	r24, r25
 38a:	b1 f7       	brne	.-20     	; 0x378 <DISP_clear+0x24>
 38c:	06 c0       	rjmp	.+12     	; 0x39a <DISP_clear+0x46>
        DISP_print("\n");
    }

    for(int i = 0; i < 4 * 16; i++)
    {
        DISP_putc(' ');
 38e:	80 e2       	ldi	r24, 0x20	; 32
 390:	0e 94 9f 00 	call	0x13e	; 0x13e <DISP_putc>
 394:	21 97       	sbiw	r28, 0x01	; 1
    while(cursor_row != 0)
    {
        DISP_print("\n");
    }

    for(int i = 0; i < 4 * 16; i++)
 396:	d9 f7       	brne	.-10     	; 0x38e <DISP_clear+0x3a>
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <DISP_clear+0x4c>
        cursor_row %= 4;
    }
}

void DISP_clear()
{
 39a:	c0 e4       	ldi	r28, 0x40	; 64
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	f7 cf       	rjmp	.-18     	; 0x38e <DISP_clear+0x3a>

    for(int i = 0; i < 4 * 16; i++)
    {
        DISP_putc(' ');
    }
}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <DISP_write_bitmap>:

void DISP_write_bitmap(uint8_t* bm)
{
 3a6:	2f 92       	push	r2
 3a8:	3f 92       	push	r3
 3aa:	4f 92       	push	r4
 3ac:	5f 92       	push	r5
 3ae:	6f 92       	push	r6
 3b0:	7f 92       	push	r7
 3b2:	8f 92       	push	r8
 3b4:	9f 92       	push	r9
 3b6:	af 92       	push	r10
 3b8:	bf 92       	push	r11
 3ba:	cf 92       	push	r12
 3bc:	df 92       	push	r13
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	67 97       	sbiw	r28, 0x17	; 23
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	9b 8b       	std	Y+19, r25	; 0x13
 3dc:	8a 8b       	std	Y+18, r24	; 0x12
 3de:	9e 5f       	subi	r25, 0xFE	; 254
 3e0:	9d 8b       	std	Y+21, r25	; 0x15
 3e2:	8c 8b       	std	Y+20, r24	; 0x14
 3e4:	c5 c0       	rjmp	.+394    	; 0x570 <DISP_write_bitmap+0x1ca>
    for(uint8_t y = 0; y < 4; y++)
    {
        for(uint8_t x = 0; x < 16; x++)
        {
            uint8_t d[8] = {
                bm[(8 * y + 0) * 16 + x],
 3e6:	ec 81       	ldd	r30, Y+4	; 0x04
 3e8:	fd 81       	ldd	r31, Y+5	; 0x05
 3ea:	61 90       	ld	r6, Z+
 3ec:	fd 83       	std	Y+5, r31	; 0x05
 3ee:	ec 83       	std	Y+4, r30	; 0x04
                bm[(8 * y + 1) * 16 + x],
 3f0:	ea 81       	ldd	r30, Y+2	; 0x02
 3f2:	fb 81       	ldd	r31, Y+3	; 0x03
 3f4:	41 90       	ld	r4, Z+
 3f6:	fb 83       	std	Y+3, r31	; 0x03
 3f8:	ea 83       	std	Y+2, r30	; 0x02
                bm[(8 * y + 2) * 16 + x],
 3fa:	ee 81       	ldd	r30, Y+6	; 0x06
 3fc:	ff 81       	ldd	r31, Y+7	; 0x07
 3fe:	a1 90       	ld	r10, Z+
 400:	ff 83       	std	Y+7, r31	; 0x07
 402:	ee 83       	std	Y+6, r30	; 0x06
                bm[(8 * y + 3) * 16 + x],
 404:	e8 85       	ldd	r30, Y+8	; 0x08
 406:	f9 85       	ldd	r31, Y+9	; 0x09
 408:	c1 90       	ld	r12, Z+
 40a:	f9 87       	std	Y+9, r31	; 0x09
 40c:	e8 87       	std	Y+8, r30	; 0x08
                bm[(8 * y + 4) * 16 + x],
 40e:	ea 85       	ldd	r30, Y+10	; 0x0a
 410:	fb 85       	ldd	r31, Y+11	; 0x0b
 412:	e1 90       	ld	r14, Z+
 414:	fb 87       	std	Y+11, r31	; 0x0b
 416:	ea 87       	std	Y+10, r30	; 0x0a
                bm[(8 * y + 5) * 16 + x],
 418:	ec 85       	ldd	r30, Y+12	; 0x0c
 41a:	fd 85       	ldd	r31, Y+13	; 0x0d
 41c:	01 91       	ld	r16, Z+
 41e:	fd 87       	std	Y+13, r31	; 0x0d
 420:	ec 87       	std	Y+12, r30	; 0x0c
                bm[(8 * y + 6) * 16 + x],
 422:	ee 85       	ldd	r30, Y+14	; 0x0e
 424:	ff 85       	ldd	r31, Y+15	; 0x0f
 426:	81 91       	ld	r24, Z+
 428:	ff 87       	std	Y+15, r31	; 0x0f
 42a:	ee 87       	std	Y+14, r30	; 0x0e
                bm[(8 * y + 7) * 16 + x]
 42c:	e8 89       	ldd	r30, Y+16	; 0x10
 42e:	f9 89       	ldd	r31, Y+17	; 0x11
 430:	81 90       	ld	r8, Z+
 432:	f9 8b       	std	Y+17, r31	; 0x11
 434:	e8 8b       	std	Y+16, r30	; 0x10
 436:	21 2c       	mov	r2, r1
 438:	31 2c       	mov	r3, r1
                db |= (((d[2] >> b) & 0x1) << 2);
                db |= (((d[3] >> b) & 0x1) << 3);
                db |= (((d[4] >> b) & 0x1) << 4);
                db |= (((d[5] >> b) & 0x1) << 5);
                db |= (((d[6] >> b) & 0x1) << 6);
                db |= (((d[7] >> b) & 0x1) << 7);
 43a:	91 2c       	mov	r9, r1
            };

            for(uint8_t b = 0; b < 8; b++)
            {
                uint8_t db = 0;
                db |= (((d[0] >> b) & 0x1) << 0);
 43c:	71 2c       	mov	r7, r1
                db |= (((d[1] >> b) & 0x1) << 1);
 43e:	51 2c       	mov	r5, r1
                db |= (((d[2] >> b) & 0x1) << 2);
 440:	b1 2c       	mov	r11, r1
                db |= (((d[3] >> b) & 0x1) << 3);
 442:	d1 2c       	mov	r13, r1
                db |= (((d[4] >> b) & 0x1) << 4);
 444:	f1 2c       	mov	r15, r1
                db |= (((d[5] >> b) & 0x1) << 5);
 446:	10 e0       	ldi	r17, 0x00	; 0
                db |= (((d[6] >> b) & 0x1) << 6);
 448:	28 2f       	mov	r18, r24
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	3f 8b       	std	Y+23, r19	; 0x17
 44e:	2e 8b       	std	Y+22, r18	; 0x16
                db |= (((d[7] >> b) & 0x1) << 7);
 450:	d4 01       	movw	r26, r8
 452:	02 2c       	mov	r0, r2
 454:	02 c0       	rjmp	.+4      	; 0x45a <DISP_write_bitmap+0xb4>
 456:	b5 95       	asr	r27
 458:	a7 95       	ror	r26
 45a:	0a 94       	dec	r0
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DISP_write_bitmap+0xb0>
 45e:	b6 95       	lsr	r27
 460:	ba 2f       	mov	r27, r26
 462:	aa 27       	eor	r26, r26
 464:	b7 95       	ror	r27
 466:	a7 95       	ror	r26
            };

            for(uint8_t b = 0; b < 8; b++)
            {
                uint8_t db = 0;
                db |= (((d[0] >> b) & 0x1) << 0);
 468:	a3 01       	movw	r20, r6
 46a:	02 2c       	mov	r0, r2
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DISP_write_bitmap+0xcc>
 46e:	55 95       	asr	r21
 470:	47 95       	ror	r20
 472:	0a 94       	dec	r0
 474:	e2 f7       	brpl	.-8      	; 0x46e <DISP_write_bitmap+0xc8>
 476:	41 70       	andi	r20, 0x01	; 1
 478:	4a 2b       	or	r20, r26
                db |= (((d[1] >> b) & 0x1) << 1);
 47a:	f2 01       	movw	r30, r4
 47c:	02 2c       	mov	r0, r2
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DISP_write_bitmap+0xde>
 480:	f5 95       	asr	r31
 482:	e7 95       	ror	r30
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <DISP_write_bitmap+0xda>
 488:	e1 70       	andi	r30, 0x01	; 1
 48a:	ff 27       	eor	r31, r31
 48c:	ee 0f       	add	r30, r30
 48e:	ff 1f       	adc	r31, r31
 490:	4e 2b       	or	r20, r30
                db |= (((d[2] >> b) & 0x1) << 2);
 492:	b5 01       	movw	r22, r10
 494:	02 2c       	mov	r0, r2
 496:	02 c0       	rjmp	.+4      	; 0x49c <DISP_write_bitmap+0xf6>
 498:	75 95       	asr	r23
 49a:	67 95       	ror	r22
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DISP_write_bitmap+0xf2>
 4a0:	61 70       	andi	r22, 0x01	; 1
 4a2:	77 27       	eor	r23, r23
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	46 2b       	or	r20, r22
                db |= (((d[3] >> b) & 0x1) << 3);
 4ae:	c6 01       	movw	r24, r12
 4b0:	02 2c       	mov	r0, r2
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DISP_write_bitmap+0x112>
 4b4:	95 95       	asr	r25
 4b6:	87 95       	ror	r24
 4b8:	0a 94       	dec	r0
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DISP_write_bitmap+0x10e>
 4bc:	81 70       	andi	r24, 0x01	; 1
 4be:	99 27       	eor	r25, r25
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	24 2f       	mov	r18, r20
 4ce:	28 2b       	or	r18, r24
                db |= (((d[4] >> b) & 0x1) << 4);
 4d0:	a7 01       	movw	r20, r14
 4d2:	02 2c       	mov	r0, r2
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DISP_write_bitmap+0x134>
 4d6:	55 95       	asr	r21
 4d8:	47 95       	ror	r20
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DISP_write_bitmap+0x130>
 4de:	41 70       	andi	r20, 0x01	; 1
 4e0:	55 27       	eor	r21, r21
 4e2:	42 95       	swap	r20
 4e4:	52 95       	swap	r21
 4e6:	50 7f       	andi	r21, 0xF0	; 240
 4e8:	54 27       	eor	r21, r20
 4ea:	40 7f       	andi	r20, 0xF0	; 240
 4ec:	54 27       	eor	r21, r20
 4ee:	42 2b       	or	r20, r18
                db |= (((d[5] >> b) & 0x1) << 5);
 4f0:	98 01       	movw	r18, r16
 4f2:	02 2c       	mov	r0, r2
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DISP_write_bitmap+0x154>
 4f6:	35 95       	asr	r19
 4f8:	27 95       	ror	r18
 4fa:	0a 94       	dec	r0
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DISP_write_bitmap+0x150>
 4fe:	21 70       	andi	r18, 0x01	; 1
 500:	33 27       	eor	r19, r19
 502:	22 0f       	add	r18, r18
 504:	33 1f       	adc	r19, r19
 506:	22 95       	swap	r18
 508:	32 95       	swap	r19
 50a:	30 7f       	andi	r19, 0xF0	; 240
 50c:	32 27       	eor	r19, r18
 50e:	20 7f       	andi	r18, 0xF0	; 240
 510:	32 27       	eor	r19, r18
 512:	24 2b       	or	r18, r20
                db |= (((d[6] >> b) & 0x1) << 6);
 514:	8e 89       	ldd	r24, Y+22	; 0x16
 516:	9f 89       	ldd	r25, Y+23	; 0x17
 518:	02 2c       	mov	r0, r2
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DISP_write_bitmap+0x17a>
 51c:	95 95       	asr	r25
 51e:	87 95       	ror	r24
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <DISP_write_bitmap+0x176>
 524:	81 70       	andi	r24, 0x01	; 1
 526:	99 27       	eor	r25, r25
 528:	00 24       	eor	r0, r0
 52a:	96 95       	lsr	r25
 52c:	87 95       	ror	r24
 52e:	07 94       	ror	r0
 530:	96 95       	lsr	r25
 532:	87 95       	ror	r24
 534:	07 94       	ror	r0
 536:	98 2f       	mov	r25, r24
 538:	80 2d       	mov	r24, r0
                db |= (((d[7] >> b) & 0x1) << 7);

                DISP_transmit_data(db);
 53a:	82 2b       	or	r24, r18
 53c:	0e 94 95 00 	call	0x12a	; 0x12a <DISP_transmit_data>
 540:	3f ef       	ldi	r19, 0xFF	; 255
 542:	23 1a       	sub	r2, r19
 544:	33 0a       	sbc	r3, r19
                bm[(8 * y + 5) * 16 + x],
                bm[(8 * y + 6) * 16 + x],
                bm[(8 * y + 7) * 16 + x]
            };

            for(uint8_t b = 0; b < 8; b++)
 546:	88 e0       	ldi	r24, 0x08	; 8
 548:	28 16       	cp	r2, r24
 54a:	31 04       	cpc	r3, r1
 54c:	09 f0       	breq	.+2      	; 0x550 <DISP_write_bitmap+0x1aa>
 54e:	80 cf       	rjmp	.-256    	; 0x450 <DISP_write_bitmap+0xaa>
 550:	99 81       	ldd	r25, Y+1	; 0x01
 552:	91 50       	subi	r25, 0x01	; 1
 554:	99 83       	std	Y+1, r25	; 0x01

void DISP_write_bitmap(uint8_t* bm)
{
    for(uint8_t y = 0; y < 4; y++)
    {
        for(uint8_t x = 0; x < 16; x++)
 556:	91 11       	cpse	r25, r1
 558:	46 cf       	rjmp	.-372    	; 0x3e6 <DISP_write_bitmap+0x40>
 55a:	ea 89       	ldd	r30, Y+18	; 0x12
 55c:	fb 89       	ldd	r31, Y+19	; 0x13
 55e:	e0 58       	subi	r30, 0x80	; 128
 560:	ff 4f       	sbci	r31, 0xFF	; 255
 562:	fb 8b       	std	Y+19, r31	; 0x13
 564:	ea 8b       	std	Y+18, r30	; 0x12
    }
}

void DISP_write_bitmap(uint8_t* bm)
{
    for(uint8_t y = 0; y < 4; y++)
 566:	2c 89       	ldd	r18, Y+20	; 0x14
 568:	3d 89       	ldd	r19, Y+21	; 0x15
 56a:	e2 17       	cp	r30, r18
 56c:	f3 07       	cpc	r31, r19
 56e:	79 f1       	breq	.+94     	; 0x5ce <DISP_write_bitmap+0x228>
 570:	8a 89       	ldd	r24, Y+18	; 0x12
 572:	9b 89       	ldd	r25, Y+19	; 0x13
 574:	40 96       	adiw	r24, 0x10	; 16
 576:	9b 83       	std	Y+3, r25	; 0x03
 578:	8a 83       	std	Y+2, r24	; 0x02
 57a:	ea 89       	ldd	r30, Y+18	; 0x12
 57c:	fb 89       	ldd	r31, Y+19	; 0x13
 57e:	b0 96       	adiw	r30, 0x20	; 32
 580:	ff 83       	std	Y+7, r31	; 0x07
 582:	ee 83       	std	Y+6, r30	; 0x06
 584:	2a 89       	ldd	r18, Y+18	; 0x12
 586:	3b 89       	ldd	r19, Y+19	; 0x13
 588:	20 5d       	subi	r18, 0xD0	; 208
 58a:	3f 4f       	sbci	r19, 0xFF	; 255
 58c:	39 87       	std	Y+9, r19	; 0x09
 58e:	28 87       	std	Y+8, r18	; 0x08
 590:	8a 89       	ldd	r24, Y+18	; 0x12
 592:	9b 89       	ldd	r25, Y+19	; 0x13
 594:	80 5c       	subi	r24, 0xC0	; 192
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	9b 87       	std	Y+11, r25	; 0x0b
 59a:	8a 87       	std	Y+10, r24	; 0x0a
 59c:	ea 89       	ldd	r30, Y+18	; 0x12
 59e:	fb 89       	ldd	r31, Y+19	; 0x13
 5a0:	e0 5b       	subi	r30, 0xB0	; 176
 5a2:	ff 4f       	sbci	r31, 0xFF	; 255
 5a4:	fd 87       	std	Y+13, r31	; 0x0d
 5a6:	ec 87       	std	Y+12, r30	; 0x0c
 5a8:	2a 89       	ldd	r18, Y+18	; 0x12
 5aa:	3b 89       	ldd	r19, Y+19	; 0x13
 5ac:	20 5a       	subi	r18, 0xA0	; 160
 5ae:	3f 4f       	sbci	r19, 0xFF	; 255
 5b0:	3f 87       	std	Y+15, r19	; 0x0f
 5b2:	2e 87       	std	Y+14, r18	; 0x0e
 5b4:	8a 89       	ldd	r24, Y+18	; 0x12
 5b6:	9b 89       	ldd	r25, Y+19	; 0x13
 5b8:	80 59       	subi	r24, 0x90	; 144
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	99 8b       	std	Y+17, r25	; 0x11
 5be:	88 8b       	std	Y+16, r24	; 0x10
        DISP_putc(' ');
    }
}

void DISP_write_bitmap(uint8_t* bm)
{
 5c0:	ea 89       	ldd	r30, Y+18	; 0x12
 5c2:	fb 89       	ldd	r31, Y+19	; 0x13
 5c4:	fd 83       	std	Y+5, r31	; 0x05
 5c6:	ec 83       	std	Y+4, r30	; 0x04
 5c8:	f0 e1       	ldi	r31, 0x10	; 16
 5ca:	f9 83       	std	Y+1, r31	; 0x01
 5cc:	0c cf       	rjmp	.-488    	; 0x3e6 <DISP_write_bitmap+0x40>

                DISP_transmit_data(db);
            }
        }
    }
}
 5ce:	67 96       	adiw	r28, 0x17	; 23
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	ff 90       	pop	r15
 5e4:	ef 90       	pop	r14
 5e6:	df 90       	pop	r13
 5e8:	cf 90       	pop	r12
 5ea:	bf 90       	pop	r11
 5ec:	af 90       	pop	r10
 5ee:	9f 90       	pop	r9
 5f0:	8f 90       	pop	r8
 5f2:	7f 90       	pop	r7
 5f4:	6f 90       	pop	r6
 5f6:	5f 90       	pop	r5
 5f8:	4f 90       	pop	r4
 5fa:	3f 90       	pop	r3
 5fc:	2f 90       	pop	r2
 5fe:	08 95       	ret

00000600 <DISP_rst>:
    DISP_clear();
}

void DISP_rst()
{
    DSP_RST_PORT &= ~(1 << DSP_RST_BIT);
 600:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 602:	8f e3       	ldi	r24, 0x3F	; 63
 604:	9c e9       	ldi	r25, 0x9C	; 156
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <DISP_rst+0x6>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <DISP_rst+0xc>
 60c:	00 00       	nop
    _delay_ms(10);
    DSP_RST_PORT |= (1 << DSP_RST_BIT);
 60e:	40 9a       	sbi	0x08, 0	; 8
 610:	8f e3       	ldi	r24, 0x3F	; 63
 612:	9c e9       	ldi	r25, 0x9C	; 156
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <DISP_rst+0x14>
 618:	00 c0       	rjmp	.+0      	; 0x61a <DISP_rst+0x1a>
 61a:	00 00       	nop
 61c:	08 95       	ret

0000061e <DISP_init>:
    }
}

void DISP_init()
{
    DSP_RST_DDR |= (1 << DSP_RST_BIT);
 61e:	38 9a       	sbi	0x07, 0	; 7
    DSP_MODE_DDR |= (1 << DSP_MODE_BIT);
 620:	0a 9a       	sbi	0x01, 2	; 1

    SPI_MasterInit();
 622:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_MasterInit>

    DISP_set_mode(1);
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 85 00 	call	0x10a	; 0x10a <DISP_set_mode>

    DISP_rst();
 62c:	0e 94 00 03 	call	0x600	; 0x600 <DISP_rst>

    DISP_transmit_cmd(0xAE); // display off
 630:	8e ea       	ldi	r24, 0xAE	; 174
 632:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p32
	DISP_transmit_cmd(0xD5); // clock
 636:	85 ed       	ldi	r24, 0xD5	; 213
 638:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0xF0); // upper nibble is rate, lower nibble is divisor
 63c:	80 ef       	ldi	r24, 0xF0	; 240
 63e:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0xA8); // mux ratio p31
 642:	88 ea       	ldi	r24, 0xA8	; 168
 644:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x20); // rtfm
 648:	80 e2       	ldi	r24, 0x20	; 32
 64a:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0xD3); // display offset
 64e:	83 ed       	ldi	r24, 0xD3	; 211
 650:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x00); // rtfm
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p3 (appendix)
	DISP_transmit_cmd(0x8D); // charge pump
 65a:	8d e8       	ldi	r24, 0x8D	; 141
 65c:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x14); // enable
 660:	84 e1       	ldi	r24, 0x14	; 20
 662:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p30, p34
	DISP_transmit_cmd(0x20); // memory addr mode
 666:	80 e2       	ldi	r24, 0x20	; 32
 668:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x00); // horizontal
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0xA1); // segment remap
 672:	81 ea       	ldi	r24, 0xA1	; 161
 674:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0xA5); // display on
 678:	85 ea       	ldi	r24, 0xA5	; 165
 67a:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0xC8); // com scan direction
 67e:	88 ec       	ldi	r24, 0xC8	; 200
 680:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0x7F); // display start line
 684:	8f e7       	ldi	r24, 0x7F	; 127
 686:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0x22); // set page address
 68a:	82 e2       	ldi	r24, 0x22	; 34
 68c:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x00);
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x03);
 696:	83 e0       	ldi	r24, 0x03	; 3
 698:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31, p40
	DISP_transmit_cmd(0xDA); // com hardware cfg
 69c:	8a ed       	ldi	r24, 0xDA	; 218
 69e:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x02); // com cfg
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p28
	DISP_transmit_cmd(0x81); // contrast aka current
 6a8:	81 e8       	ldi	r24, 0x81	; 129
 6aa:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0xFF); // 128 is midpoint
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p32
	DISP_transmit_cmd(0xD9); // precharge
 6b4:	89 ed       	ldi	r24, 0xD9	; 217
 6b6:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x11); // rtfm
 6ba:	81 e1       	ldi	r24, 0x11	; 17
 6bc:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p32
	DISP_transmit_cmd(0xDB); // vcomh deselect level
 6c0:	8b ed       	ldi	r24, 0xDB	; 219
 6c2:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x20); // rtfm
 6c6:	80 e2       	ldi	r24, 0x20	; 32
 6c8:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

	DISP_transmit_cmd(0xA6); // non-inverted
 6cc:	86 ea       	ldi	r24, 0xA6	; 166
 6ce:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0xA4); // display scan on
 6d2:	84 ea       	ldi	r24, 0xA4	; 164
 6d4:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0xAF); // drivers on
 6d8:	8f ea       	ldi	r24, 0xAF	; 175
 6da:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    DISP_clear();
 6de:	0e 94 aa 01 	call	0x354	; 0x354 <DISP_clear>
 6e2:	08 95       	ret

000006e4 <main>:
	// First you need to write the underlying functions in spi.c
	// Then you can initialize the display here. Check out display.h for the functions available to you
	// from the display driver.
	//
	// CODE GOES HERE
	DISP_init();
 6e4:	0e 94 0f 03 	call	0x61e	; 0x61e <DISP_init>


	// Now display the bitmap on the screen by using the correct display function.
	//
	// CODE GOES HERE
	DISP_write_bitmap(bitmap);
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	96 e0       	ldi	r25, 0x06	; 6
 6ec:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DISP_write_bitmap>


	// Infinite loop to keep the chip going
	while(1);
 6f0:	ff cf       	rjmp	.-2      	; 0x6f0 <main+0xc>

000006f2 <SPI_MasterInit>:
{
    // Initialize the SPI port as master
    // You will need to set MOSI, SCK, SS (slave select) as outputs
    //
    // CODE GOES HERE
	DDRB = (1<<MOSI)|(1<<SCK) | (1<<SS0);
 6f2:	80 eb       	ldi	r24, 0xB0	; 176
 6f4:	84 b9       	out	0x04, r24	; 4

    // Now enable SPI, Master and set clock rate
    //
    // CODE GOES HERE

	SPCR0 = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 6f6:	81 e5       	ldi	r24, 0x51	; 81
 6f8:	8c bd       	out	0x2c, r24	; 44
 6fa:	08 95       	ret

000006fc <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
    // First select the correct slave by setting the slave select (SS) bit LOW
    //
    PORTB &= ~(1<<SS0);
 6fc:	2c 98       	cbi	0x05, 4	; 5


    // Then start the transmission by assigning the data to the SPI data register
    //
    SPDR0 = cData;
 6fe:	8e bd       	out	0x2e, r24	; 46


    // Now wait for the data transmission to complete by periodically checking the SPI status register
    //
    while(!(SPSR0 & (1<<SPIF)));
 700:	0d b4       	in	r0, 0x2d	; 45
 702:	07 fe       	sbrs	r0, 7
 704:	fd cf       	rjmp	.-6      	; 0x700 <SPI_MasterTransmit+0x4>


    // Finally set the slave select bit HIGH before leaving the function
    //
    PORTB |= 1<<SS0;
 706:	2c 9a       	sbi	0x05, 4	; 5
 708:	08 95       	ret

0000070a <_exit>:
 70a:	f8 94       	cli

0000070c <__stop_program>:
 70c:	ff cf       	rjmp	.-2      	; 0x70c <__stop_program>
