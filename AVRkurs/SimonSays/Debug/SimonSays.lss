
SimonSays.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000059a  00800100  000009aa  00000a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080069a  0080069a  00000fd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000faf  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000047a  00000000  00000000  000020af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ab  00000000  00000000  00002529  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bab  00000000  00000000  00002f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003b3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	16 e0       	ldi	r17, 0x06	; 6
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ea ea       	ldi	r30, 0xAA	; 170
  e0:	f9 e0       	ldi	r31, 0x09	; 9
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	aa 39       	cpi	r26, 0x9A	; 154
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	26 e0       	ldi	r18, 0x06	; 6
  f0:	aa e9       	ldi	r26, 0x9A	; 154
  f2:	b6 e0       	ldi	r27, 0x06	; 6
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ae 39       	cpi	r26, 0x9E	; 158
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
 102:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <DISP_set_mode>:
            {
                uint8_t db = 0;
                db |= (((d[0] >> b) & 0x1) << 0);
                db |= (((d[1] >> b) & 0x1) << 1);
                db |= (((d[2] >> b) & 0x1) << 2);
                db |= (((d[3] >> b) & 0x1) << 3);
 10a:	88 23       	and	r24, r24
 10c:	11 f0       	breq	.+4      	; 0x112 <DISP_set_mode+0x8>
 10e:	12 9a       	sbi	0x02, 2	; 2
 110:	08 95       	ret
 112:	12 98       	cbi	0x02, 2	; 2
 114:	08 95       	ret

00000116 <DISP_transmit_cmd>:
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 85 00 	call	0x10a	; 0x10a <DISP_set_mode>
 120:	8c 2f       	mov	r24, r28
 122:	0e 94 e5 03 	call	0x7ca	; 0x7ca <SPI_MasterTransmit>
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <DISP_transmit_data>:
                db |= (((d[4] >> b) & 0x1) << 4);
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 85 00 	call	0x10a	; 0x10a <DISP_set_mode>
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 e5 03 	call	0x7ca	; 0x7ca <SPI_MasterTransmit>
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <DISP_putc>:
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	8a 30       	cpi	r24, 0x0A	; 10
 148:	d1 f4       	brne	.+52     	; 0x17e <DISP_putc+0x40>
                db |= (((d[5] >> b) & 0x1) << 5);
 14a:	80 91 9a 06 	lds	r24, 0x069A
 14e:	90 91 9b 06 	lds	r25, 0x069B
 152:	89 2b       	or	r24, r25
 154:	51 f4       	brne	.+20     	; 0x16a <DISP_putc+0x2c>
 156:	80 e2       	ldi	r24, 0x20	; 32
 158:	0e 94 9f 00 	call	0x13e	; 0x13e <DISP_putc>
 15c:	80 91 9a 06 	lds	r24, 0x069A
 160:	90 91 9b 06 	lds	r25, 0x069B
 164:	89 2b       	or	r24, r25
 166:	09 f4       	brne	.+2      	; 0x16a <DISP_putc+0x2c>
 168:	e1 c0       	rjmp	.+450    	; 0x32c <DISP_putc+0x1ee>
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	0e 94 9f 00 	call	0x13e	; 0x13e <DISP_putc>
                db |= (((d[6] >> b) & 0x1) << 6);
 170:	80 91 9a 06 	lds	r24, 0x069A
 174:	90 91 9b 06 	lds	r25, 0x069B
 178:	89 2b       	or	r24, r25
 17a:	b9 f7       	brne	.-18     	; 0x16a <DISP_putc+0x2c>
 17c:	d7 c0       	rjmp	.+430    	; 0x32c <DISP_putc+0x1ee>
 17e:	80 32       	cpi	r24, 0x20	; 32
 180:	08 f4       	brcc	.+2      	; 0x184 <DISP_putc+0x46>
 182:	d4 c0       	rjmp	.+424    	; 0x32c <DISP_putc+0x1ee>
 184:	8f 37       	cpi	r24, 0x7F	; 127
 186:	58 f4       	brcc	.+22     	; 0x19e <DISP_putc+0x60>
 188:	08 2f       	mov	r16, r24
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	00 0f       	add	r16, r16
 18e:	11 1f       	adc	r17, r17
 190:	00 0f       	add	r16, r16
 192:	11 1f       	adc	r17, r17
                db |= (((d[7] >> b) & 0x1) << 7);

                DISP_transmit_data(db);
 194:	00 0f       	add	r16, r16
 196:	11 1f       	adc	r17, r17
 198:	0c 5f       	subi	r16, 0xFC	; 252
 19a:	1d 4f       	sbci	r17, 0xFD	; 253
 19c:	12 c0       	rjmp	.+36     	; 0x1c2 <DISP_putc+0x84>
 19e:	80 3a       	cpi	r24, 0xA0	; 160
                bm[(8 * y + 5) * 16 + x],
                bm[(8 * y + 6) * 16 + x],
                bm[(8 * y + 7) * 16 + x]
            };

            for(uint8_t b = 0; b < 8; b++)
 1a0:	08 f4       	brcc	.+2      	; 0x1a4 <DISP_putc+0x66>
 1a2:	c4 c0       	rjmp	.+392    	; 0x32c <DISP_putc+0x1ee>
 1a4:	81 3c       	cpi	r24, 0xC1	; 193
 1a6:	58 f0       	brcs	.+22     	; 0x1be <DISP_putc+0x80>
 1a8:	08 2f       	mov	r16, r24
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	00 0f       	add	r16, r16
 1ae:	11 1f       	adc	r17, r17

void DISP_write_bitmap(uint8_t* bm)
{
    for(uint8_t y = 0; y < 4; y++)
    {
        for(uint8_t x = 0; x < 16; x++)
 1b0:	00 0f       	add	r16, r16
 1b2:	11 1f       	adc	r17, r17
 1b4:	00 0f       	add	r16, r16
 1b6:	11 1f       	adc	r17, r17
 1b8:	0c 5f       	subi	r16, 0xFC	; 252
 1ba:	14 40       	sbci	r17, 0x04	; 4
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DISP_putc+0x84>
 1be:	00 e0       	ldi	r16, 0x00	; 0
    }
}

void DISP_write_bitmap(uint8_t* bm)
{
    for(uint8_t y = 0; y < 4; y++)
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	f8 01       	movw	r30, r16
 1c8:	a7 81       	ldd	r26, Z+7	; 0x07
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	0c 2e       	mov	r0, r28
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DISP_putc+0x96>
 1d0:	b5 95       	asr	r27
 1d2:	a7 95       	ror	r26
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DISP_putc+0x92>
 1d8:	b6 95       	lsr	r27
 1da:	ba 2f       	mov	r27, r26
 1dc:	aa 27       	eor	r26, r26
 1de:	b7 95       	ror	r27
 1e0:	a7 95       	ror	r26
 1e2:	f8 01       	movw	r30, r16
 1e4:	40 81       	ld	r20, Z
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	0c 2e       	mov	r0, r28
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DISP_putc+0xb2>
 1ec:	55 95       	asr	r21
 1ee:	47 95       	ror	r20
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DISP_putc+0xae>
 1f4:	41 70       	andi	r20, 0x01	; 1
 1f6:	4a 2b       	or	r20, r26
 1f8:	f8 01       	movw	r30, r16
 1fa:	91 81       	ldd	r25, Z+1	; 0x01
 1fc:	e9 2f       	mov	r30, r25
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	0c 2e       	mov	r0, r28
 202:	02 c0       	rjmp	.+4      	; 0x208 <DISP_putc+0xca>
 204:	f5 95       	asr	r31
 206:	e7 95       	ror	r30
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DISP_putc+0xc6>
 20c:	e1 70       	andi	r30, 0x01	; 1
 20e:	ff 27       	eor	r31, r31
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	4e 2b       	or	r20, r30
 216:	f8 01       	movw	r30, r16
 218:	92 81       	ldd	r25, Z+2	; 0x02
        DISP_putc(' ');
    }
}

void DISP_write_bitmap(uint8_t* bm)
{
 21a:	69 2f       	mov	r22, r25
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	0c 2e       	mov	r0, r28
 220:	02 c0       	rjmp	.+4      	; 0x226 <DISP_putc+0xe8>
 222:	75 95       	asr	r23
 224:	67 95       	ror	r22
 226:	0a 94       	dec	r0

                DISP_transmit_data(db);
            }
        }
    }
}
 228:	e2 f7       	brpl	.-8      	; 0x222 <DISP_putc+0xe4>
 22a:	61 70       	andi	r22, 0x01	; 1
 22c:	77 27       	eor	r23, r23
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	46 2b       	or	r20, r22
 238:	93 81       	ldd	r25, Z+3	; 0x03
 23a:	89 2f       	mov	r24, r25
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0c 2e       	mov	r0, r28
 240:	02 c0       	rjmp	.+4      	; 0x246 <DISP_putc+0x108>
 242:	95 95       	asr	r25
 244:	87 95       	ror	r24
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DISP_putc+0x104>
 24a:	81 70       	andi	r24, 0x01	; 1
 24c:	99 27       	eor	r25, r25
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
    {
        uint8_t db = 0;
        db |= (((d[0] >> b) & 0x1) << 0);
        db |= (((d[1] >> b) & 0x1) << 1);
        db |= (((d[2] >> b) & 0x1) << 2);
        db |= (((d[3] >> b) & 0x1) << 3);
 25a:	24 2f       	mov	r18, r20
 25c:	28 2b       	or	r18, r24
        db |= (((d[4] >> b) & 0x1) << 4);
 25e:	94 81       	ldd	r25, Z+4	; 0x04
 260:	49 2f       	mov	r20, r25
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	0c 2e       	mov	r0, r28
 266:	02 c0       	rjmp	.+4      	; 0x26c <DISP_putc+0x12e>
 268:	55 95       	asr	r21
 26a:	47 95       	ror	r20
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DISP_putc+0x12a>
 270:	41 70       	andi	r20, 0x01	; 1
 272:	55 27       	eor	r21, r21
 274:	42 95       	swap	r20
 276:	52 95       	swap	r21
 278:	50 7f       	andi	r21, 0xF0	; 240
 27a:	54 27       	eor	r21, r20
 27c:	40 7f       	andi	r20, 0xF0	; 240
 27e:	54 27       	eor	r21, r20
 280:	42 2b       	or	r20, r18
        db |= (((d[5] >> b) & 0x1) << 5);
 282:	f8 01       	movw	r30, r16
 284:	95 81       	ldd	r25, Z+5	; 0x05
 286:	29 2f       	mov	r18, r25
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	0c 2e       	mov	r0, r28
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DISP_putc+0x154>
 28e:	35 95       	asr	r19
 290:	27 95       	ror	r18
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <DISP_putc+0x150>
 296:	21 70       	andi	r18, 0x01	; 1
 298:	33 27       	eor	r19, r19
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	22 95       	swap	r18
 2a0:	32 95       	swap	r19
 2a2:	30 7f       	andi	r19, 0xF0	; 240
 2a4:	32 27       	eor	r19, r18
 2a6:	20 7f       	andi	r18, 0xF0	; 240
 2a8:	32 27       	eor	r19, r18
 2aa:	24 2b       	or	r18, r20
        db |= (((d[6] >> b) & 0x1) << 6);
 2ac:	f8 01       	movw	r30, r16
 2ae:	86 81       	ldd	r24, Z+6	; 0x06
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0c 2e       	mov	r0, r28
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DISP_putc+0x17c>
 2b6:	95 95       	asr	r25
 2b8:	87 95       	ror	r24
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DISP_putc+0x178>
 2be:	81 70       	andi	r24, 0x01	; 1
 2c0:	99 27       	eor	r25, r25
 2c2:	00 24       	eor	r0, r0
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	07 94       	ror	r0
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	07 94       	ror	r0
 2d0:	98 2f       	mov	r25, r24
 2d2:	80 2d       	mov	r24, r0
        db |= (((d[7] >> b) & 0x1) << 7);

        DISP_transmit_data(db);
 2d4:	82 2b       	or	r24, r18
 2d6:	0e 94 95 00 	call	0x12a	; 0x12a <DISP_transmit_data>
 2da:	21 96       	adiw	r28, 0x01	; 1
    else if(c > 0xC0)
    {
        d = font8x8_ext_latin[(int)c - 0xc0];
    }

    for(uint8_t b = 0; b < 8; b++)
 2dc:	c8 30       	cpi	r28, 0x08	; 8
 2de:	d1 05       	cpc	r29, r1
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <DISP_putc+0x1a6>
 2e2:	71 cf       	rjmp	.-286    	; 0x1c6 <DISP_putc+0x88>
        db |= (((d[7] >> b) & 0x1) << 7);

        DISP_transmit_data(db);
    }

    cursor_col++;
 2e4:	80 91 9a 06 	lds	r24, 0x069A
 2e8:	90 91 9b 06 	lds	r25, 0x069B
 2ec:	01 96       	adiw	r24, 0x01	; 1
    cursor_col %= 16;
 2ee:	8f 70       	andi	r24, 0x0F	; 15
 2f0:	90 78       	andi	r25, 0x80	; 128
 2f2:	99 23       	and	r25, r25
 2f4:	24 f4       	brge	.+8      	; 0x2fe <DISP_putc+0x1c0>
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	80 6f       	ori	r24, 0xF0	; 240
 2fa:	9f 6f       	ori	r25, 0xFF	; 255
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	90 93 9b 06 	sts	0x069B, r25
 302:	80 93 9a 06 	sts	0x069A, r24

    if(cursor_col == 0)
 306:	89 2b       	or	r24, r25
 308:	89 f4       	brne	.+34     	; 0x32c <DISP_putc+0x1ee>
    {
        cursor_row++;
 30a:	80 91 9c 06 	lds	r24, 0x069C
 30e:	90 91 9d 06 	lds	r25, 0x069D
 312:	01 96       	adiw	r24, 0x01	; 1
        cursor_row %= 4;
 314:	83 70       	andi	r24, 0x03	; 3
 316:	90 78       	andi	r25, 0x80	; 128
 318:	99 23       	and	r25, r25
 31a:	24 f4       	brge	.+8      	; 0x324 <DISP_putc+0x1e6>
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	8c 6f       	ori	r24, 0xFC	; 252
 320:	9f 6f       	ori	r25, 0xFF	; 255
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	90 93 9d 06 	sts	0x069D, r25
 328:	80 93 9c 06 	sts	0x069C, r24
    }
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	08 95       	ret

00000336 <DISP_print>:

int cursor_row = 0;
int cursor_col = 0;

void DISP_print(const char* str)
{
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	ec 01       	movw	r28, r24
    while(*str != '\0')
 33c:	88 81       	ld	r24, Y
 33e:	88 23       	and	r24, r24
 340:	31 f0       	breq	.+12     	; 0x34e <DISP_print+0x18>
 342:	21 96       	adiw	r28, 0x01	; 1
    {
        DISP_putc(*str);
 344:	0e 94 9f 00 	call	0x13e	; 0x13e <DISP_putc>
int cursor_row = 0;
int cursor_col = 0;

void DISP_print(const char* str)
{
    while(*str != '\0')
 348:	89 91       	ld	r24, Y+
 34a:	81 11       	cpse	r24, r1
 34c:	fb cf       	rjmp	.-10     	; 0x344 <DISP_print+0xe>
    {
        DISP_putc(*str);
        str++;
    }
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <DISP_clear>:
        cursor_row %= 4;
    }
}

void DISP_clear()
{
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
    if(cursor_row == 0)
 358:	80 91 9c 06 	lds	r24, 0x069C
 35c:	90 91 9d 06 	lds	r25, 0x069D
 360:	89 2b       	or	r24, r25
 362:	51 f4       	brne	.+20     	; 0x378 <DISP_clear+0x24>
    {
        DISP_print("\n");
 364:	8b e5       	ldi	r24, 0x5B	; 91
 366:	96 e0       	ldi	r25, 0x06	; 6
 368:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
    }
    while(cursor_row != 0)
 36c:	80 91 9c 06 	lds	r24, 0x069C
 370:	90 91 9d 06 	lds	r25, 0x069D
 374:	89 2b       	or	r24, r25
 376:	89 f0       	breq	.+34     	; 0x39a <DISP_clear+0x46>
    {
        DISP_print("\n");
 378:	8b e5       	ldi	r24, 0x5B	; 91
 37a:	96 e0       	ldi	r25, 0x06	; 6
 37c:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
{
    if(cursor_row == 0)
    {
        DISP_print("\n");
    }
    while(cursor_row != 0)
 380:	80 91 9c 06 	lds	r24, 0x069C
 384:	90 91 9d 06 	lds	r25, 0x069D
 388:	89 2b       	or	r24, r25
 38a:	b1 f7       	brne	.-20     	; 0x378 <DISP_clear+0x24>
 38c:	06 c0       	rjmp	.+12     	; 0x39a <DISP_clear+0x46>
        DISP_print("\n");
    }

    for(int i = 0; i < 4 * 16; i++)
    {
        DISP_putc(' ');
 38e:	80 e2       	ldi	r24, 0x20	; 32
 390:	0e 94 9f 00 	call	0x13e	; 0x13e <DISP_putc>
 394:	21 97       	sbiw	r28, 0x01	; 1
    while(cursor_row != 0)
    {
        DISP_print("\n");
    }

    for(int i = 0; i < 4 * 16; i++)
 396:	d9 f7       	brne	.-10     	; 0x38e <DISP_clear+0x3a>
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <DISP_clear+0x4c>
        cursor_row %= 4;
    }
}

void DISP_clear()
{
 39a:	c0 e4       	ldi	r28, 0x40	; 64
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	f7 cf       	rjmp	.-18     	; 0x38e <DISP_clear+0x3a>

    for(int i = 0; i < 4 * 16; i++)
    {
        DISP_putc(' ');
    }
}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <DISP_rst>:
    DISP_clear();
}

void DISP_rst()
{
    DSP_RST_PORT &= ~(1 << DSP_RST_BIT);
 3a6:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a8:	8f e3       	ldi	r24, 0x3F	; 63
 3aa:	9c e9       	ldi	r25, 0x9C	; 156
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <DISP_rst+0x6>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <DISP_rst+0xc>
 3b2:	00 00       	nop
    _delay_ms(10);
    DSP_RST_PORT |= (1 << DSP_RST_BIT);
 3b4:	40 9a       	sbi	0x08, 0	; 8
 3b6:	8f e3       	ldi	r24, 0x3F	; 63
 3b8:	9c e9       	ldi	r25, 0x9C	; 156
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <DISP_rst+0x14>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <DISP_rst+0x1a>
 3c0:	00 00       	nop
 3c2:	08 95       	ret

000003c4 <DISP_init>:
    }
}

void DISP_init()
{
    DSP_RST_DDR |= (1 << DSP_RST_BIT);
 3c4:	38 9a       	sbi	0x07, 0	; 7
    DSP_MODE_DDR |= (1 << DSP_MODE_BIT);
 3c6:	0a 9a       	sbi	0x01, 2	; 1

    SPI_MasterInit();
 3c8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <SPI_MasterInit>

    DISP_set_mode(1);
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 85 00 	call	0x10a	; 0x10a <DISP_set_mode>

    DISP_rst();
 3d2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DISP_rst>

    DISP_transmit_cmd(0xAE); // display off
 3d6:	8e ea       	ldi	r24, 0xAE	; 174
 3d8:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p32
	DISP_transmit_cmd(0xD5); // clock
 3dc:	85 ed       	ldi	r24, 0xD5	; 213
 3de:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0xF0); // upper nibble is rate, lower nibble is divisor
 3e2:	80 ef       	ldi	r24, 0xF0	; 240
 3e4:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0xA8); // mux ratio p31
 3e8:	88 ea       	ldi	r24, 0xA8	; 168
 3ea:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x20); // rtfm
 3ee:	80 e2       	ldi	r24, 0x20	; 32
 3f0:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0xD3); // display offset
 3f4:	83 ed       	ldi	r24, 0xD3	; 211
 3f6:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x00); // rtfm
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p3 (appendix)
	DISP_transmit_cmd(0x8D); // charge pump
 400:	8d e8       	ldi	r24, 0x8D	; 141
 402:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x14); // enable
 406:	84 e1       	ldi	r24, 0x14	; 20
 408:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p30, p34
	DISP_transmit_cmd(0x20); // memory addr mode
 40c:	80 e2       	ldi	r24, 0x20	; 32
 40e:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x00); // horizontal
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0xA1); // segment remap
 418:	81 ea       	ldi	r24, 0xA1	; 161
 41a:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0xA5); // display on
 41e:	85 ea       	ldi	r24, 0xA5	; 165
 420:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0xC8); // com scan direction
 424:	88 ec       	ldi	r24, 0xC8	; 200
 426:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0x7F); // display start line
 42a:	8f e7       	ldi	r24, 0x7F	; 127
 42c:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31
	DISP_transmit_cmd(0x22); // set page address
 430:	82 e2       	ldi	r24, 0x22	; 34
 432:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x00);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x03);
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p31, p40
	DISP_transmit_cmd(0xDA); // com hardware cfg
 442:	8a ed       	ldi	r24, 0xDA	; 218
 444:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x02); // com cfg
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p28
	DISP_transmit_cmd(0x81); // contrast aka current
 44e:	81 e8       	ldi	r24, 0x81	; 129
 450:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0xFF); // 128 is midpoint
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p32
	DISP_transmit_cmd(0xD9); // precharge
 45a:	89 ed       	ldi	r24, 0xD9	; 217
 45c:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x11); // rtfm
 460:	81 e1       	ldi	r24, 0x11	; 17
 462:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    // p32
	DISP_transmit_cmd(0xDB); // vcomh deselect level
 466:	8b ed       	ldi	r24, 0xDB	; 219
 468:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0x20); // rtfm
 46c:	80 e2       	ldi	r24, 0x20	; 32
 46e:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

	DISP_transmit_cmd(0xA6); // non-inverted
 472:	86 ea       	ldi	r24, 0xA6	; 166
 474:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0xA4); // display scan on
 478:	84 ea       	ldi	r24, 0xA4	; 164
 47a:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>
	DISP_transmit_cmd(0xAF); // drivers on
 47e:	8f ea       	ldi	r24, 0xAF	; 175
 480:	0e 94 8b 00 	call	0x116	; 0x116 <DISP_transmit_cmd>

    DISP_clear();
 484:	0e 94 aa 01 	call	0x354	; 0x354 <DISP_clear>
 488:	08 95       	ret

0000048a <LEDinit>:
// You are encouraged to reuse functions and code from earlier exercises.

void LEDinit()
{
	//Enable LEDs as output
	DDRD |= (1<<LED1) | (1<<LED2);
 48a:	8a b1       	in	r24, 0x0a	; 10
 48c:	80 63       	ori	r24, 0x30	; 48
 48e:	8a b9       	out	0x0a, r24	; 10
	DDRA |= (1<<LED3);
 490:	0b 9a       	sbi	0x01, 3	; 1
	
	//Turn LEDs default off
	PORTD |=(1<<LED1) | (1<<LED2);
 492:	8b b1       	in	r24, 0x0b	; 11
 494:	80 63       	ori	r24, 0x30	; 48
 496:	8b b9       	out	0x0b, r24	; 11
	PORTA |=(1<<LED3);
 498:	13 9a       	sbi	0x02, 3	; 2
 49a:	08 95       	ret

0000049c <SWinit>:
}

void SWinit()
{
	//Enable buttons as input
	DDRC &= ~(1<<SW1);
 49c:	39 98       	cbi	0x07, 1	; 7
	DDRA &= ~(1<<SW2) | (1<<SW3);
 49e:	08 98       	cbi	0x01, 0	; 1

	//Enable pull-up
	PORTC |= (1 << SW1);
 4a0:	41 9a       	sbi	0x08, 1	; 8
	PORTA |= (1 << SW2) | (1 << SW3);
 4a2:	82 b1       	in	r24, 0x02	; 2
 4a4:	83 60       	ori	r24, 0x03	; 3
 4a6:	82 b9       	out	0x02, r24	; 2
 4a8:	08 95       	ret

000004aa <main>:
}

int main()
{
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	64 97       	sbiw	r28, 0x14	; 20
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61

	LEDinit();
 4be:	0e 94 45 02 	call	0x48a	; 0x48a <LEDinit>
	SWinit();
 4c2:	0e 94 4e 02 	call	0x49c	; 0x49c <SWinit>
	DISP_init();
 4c6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DISP_init>
	DISP_print("Welcome to\nSimon Says!");
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	96 e0       	ldi	r25, 0x06	; 6
 4ce:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	4b e7       	ldi	r20, 0x7B	; 123
 4d6:	52 e9       	ldi	r21, 0x92	; 146
 4d8:	21 50       	subi	r18, 0x01	; 1
 4da:	40 40       	sbci	r20, 0x00	; 0
 4dc:	50 40       	sbci	r21, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <main+0x2e>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <main+0x38>
 4e2:	00 00       	nop
	uint8_t answers[numberOfRounds];
	uint8_t guesses[numberOfRounds];
	uint8_t totalNumberOfGuesses = 1;
	uint8_t currentNumberOfGuesses;
	char totalNumbersWhenOver;
	bool won = true;
 4e4:	88 24       	eor	r8, r8
 4e6:	83 94       	inc	r8
	
	
	const uint8_t numberOfRounds = 10;
	uint8_t answers[numberOfRounds];
	uint8_t guesses[numberOfRounds];
	uint8_t totalNumberOfGuesses = 1;
 4e8:	ff 24       	eor	r15, r15
 4ea:	f3 94       	inc	r15
 4ec:	ce 01       	movw	r24, r28
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	6c 01       	movw	r12, r24
		DISP_print("Here comes the \nsequence: ");
		_delay_ms(2000);
		
		srand(0);

		for (uint8_t i= 0; i< totalNumberOfGuesses; i++)
 4f2:	48 2e       	mov	r4, r24
 4f4:	5d 2c       	mov	r5, r13
		{
			answers[i] = (rand() % 3);
 4f6:	0f 2e       	mov	r0, r31
 4f8:	f3 e0       	ldi	r31, 0x03	; 3
 4fa:	af 2e       	mov	r10, r31
 4fc:	b1 2c       	mov	r11, r1
 4fe:	f0 2d       	mov	r31, r0
				_delay_ms(500);
				PORTD ^= (1<<LED2);
			}
			else if(answers[i] == 2)
			{
				PORTA ^= (1<<LED3);
 500:	68 94       	set
 502:	66 24       	eor	r6, r6
 504:	63 f8       	bld	r6, 3
				_delay_ms(500);
				PORTD ^= (1<<LED1);
			}
			else if(answers[i] == 1)
			{
				PORTD ^= (1<<LED2);
 506:	68 94       	set
 508:	99 24       	eor	r9, r9
 50a:	94 f8       	bld	r9, 4
				_delay_ms(500);


			}
			DISP_clear();
			DISP_print("Your turn!");
 50c:	21 2c       	mov	r2, r1

				}

				else if (!((1<<SW3) & PINA))
				{
				guesses[currentNumberOfGuesses] = 2;
 50e:	68 94       	set
 510:	33 24       	eor	r3, r3
 512:	31 f8       	bld	r3, 1

			for (uint8_t i = 0; i<currentNumberOfGuesses; i++)
			{
				if (answers[i] != guesses[i])
				{
					won = false;
 514:	72 2c       	mov	r7, r2


	// Infinite loop to keep the chip going
	while(1)
	{
		DISP_clear();
 516:	0e 94 aa 01 	call	0x354	; 0x354 <DISP_clear>
		DISP_print("Here comes the \nsequence: ");
 51a:	8b e1       	ldi	r24, 0x1B	; 27
 51c:	96 e0       	ldi	r25, 0x06	; 6
 51e:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
 522:	9f ef       	ldi	r25, 0xFF	; 255
 524:	e7 ea       	ldi	r30, 0xA7	; 167
 526:	f1 e6       	ldi	r31, 0x61	; 97
 528:	91 50       	subi	r25, 0x01	; 1
 52a:	e0 40       	sbci	r30, 0x00	; 0
 52c:	f0 40       	sbci	r31, 0x00	; 0
 52e:	e1 f7       	brne	.-8      	; 0x528 <main+0x7e>
 530:	00 c0       	rjmp	.+0      	; 0x532 <main+0x88>
 532:	00 00       	nop
		_delay_ms(2000);
		
		srand(0);
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 65 04 	call	0x8ca	; 0x8ca <srand>

		for (uint8_t i= 0; i< totalNumberOfGuesses; i++)
 53c:	ff 20       	and	r15, r15
 53e:	09 f4       	brne	.+2      	; 0x542 <main+0x98>
 540:	38 c1       	rjmp	.+624    	; 0x7b2 <main+0x308>
 542:	04 2d       	mov	r16, r4
 544:	15 2d       	mov	r17, r5
		{
			answers[i] = (rand() % 3);

			if(answers[i] == 0)
			{
				PORTD ^= (1<<LED1);
 546:	68 94       	set
 548:	ee 24       	eor	r14, r14
 54a:	e5 f8       	bld	r14, 5
		
		srand(0);

		for (uint8_t i= 0; i< totalNumberOfGuesses; i++)
		{
			answers[i] = (rand() % 3);
 54c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <rand>
 550:	b5 01       	movw	r22, r10
 552:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__divmodhi4>
 556:	f8 01       	movw	r30, r16
 558:	81 93       	st	Z+, r24
 55a:	8f 01       	movw	r16, r30

			if(answers[i] == 0)
 55c:	81 11       	cpse	r24, r1
 55e:	10 c0       	rjmp	.+32     	; 0x580 <main+0xd6>
			{
				PORTD ^= (1<<LED1);
 560:	8b b1       	in	r24, 0x0b	; 11
 562:	8e 25       	eor	r24, r14
 564:	8b b9       	out	0x0b, r24	; 11
 566:	ff ef       	ldi	r31, 0xFF	; 255
 568:	29 e6       	ldi	r18, 0x69	; 105
 56a:	48 e1       	ldi	r20, 0x18	; 24
 56c:	f1 50       	subi	r31, 0x01	; 1
 56e:	20 40       	sbci	r18, 0x00	; 0
 570:	40 40       	sbci	r20, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <main+0xc2>
 574:	00 c0       	rjmp	.+0      	; 0x576 <main+0xcc>
 576:	00 00       	nop
				_delay_ms(500);
				PORTD ^= (1<<LED1);
 578:	8b b1       	in	r24, 0x0b	; 11
 57a:	8e 25       	eor	r24, r14
 57c:	8b b9       	out	0x0b, r24	; 11
 57e:	23 c0       	rjmp	.+70     	; 0x5c6 <main+0x11c>
			}
			else if(answers[i] == 1)
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	81 f4       	brne	.+32     	; 0x5a4 <main+0xfa>
			{
				PORTD ^= (1<<LED2);
 584:	8b b1       	in	r24, 0x0b	; 11
 586:	89 25       	eor	r24, r9
 588:	8b b9       	out	0x0b, r24	; 11
 58a:	5f ef       	ldi	r21, 0xFF	; 255
 58c:	89 e6       	ldi	r24, 0x69	; 105
 58e:	98 e1       	ldi	r25, 0x18	; 24
 590:	51 50       	subi	r21, 0x01	; 1
 592:	80 40       	sbci	r24, 0x00	; 0
 594:	90 40       	sbci	r25, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <main+0xe6>
 598:	00 c0       	rjmp	.+0      	; 0x59a <main+0xf0>
 59a:	00 00       	nop
				_delay_ms(500);
				PORTD ^= (1<<LED2);
 59c:	8b b1       	in	r24, 0x0b	; 11
 59e:	89 25       	eor	r24, r9
 5a0:	8b b9       	out	0x0b, r24	; 11
 5a2:	11 c0       	rjmp	.+34     	; 0x5c6 <main+0x11c>
			}
			else if(answers[i] == 2)
 5a4:	82 30       	cpi	r24, 0x02	; 2
 5a6:	79 f4       	brne	.+30     	; 0x5c6 <main+0x11c>
			{
				PORTA ^= (1<<LED3);
 5a8:	82 b1       	in	r24, 0x02	; 2
 5aa:	86 25       	eor	r24, r6
 5ac:	82 b9       	out	0x02, r24	; 2
 5ae:	ef ef       	ldi	r30, 0xFF	; 255
 5b0:	f9 e6       	ldi	r31, 0x69	; 105
 5b2:	28 e1       	ldi	r18, 0x18	; 24
 5b4:	e1 50       	subi	r30, 0x01	; 1
 5b6:	f0 40       	sbci	r31, 0x00	; 0
 5b8:	20 40       	sbci	r18, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <main+0x10a>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <main+0x114>
 5be:	00 00       	nop
				_delay_ms(500);
				PORTA ^= (1<<LED3);
 5c0:	82 b1       	in	r24, 0x02	; 2
 5c2:	86 25       	eor	r24, r6
 5c4:	82 b9       	out	0x02, r24	; 2
 5c6:	4f ef       	ldi	r20, 0xFF	; 255
 5c8:	59 e6       	ldi	r21, 0x69	; 105
 5ca:	88 e1       	ldi	r24, 0x18	; 24
 5cc:	41 50       	subi	r20, 0x01	; 1
 5ce:	50 40       	sbci	r21, 0x00	; 0
 5d0:	80 40       	sbci	r24, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <main+0x122>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <main+0x12c>
 5d6:	00 00       	nop
 5d8:	80 2f       	mov	r24, r16
 5da:	8c 19       	sub	r24, r12
		DISP_print("Here comes the \nsequence: ");
		_delay_ms(2000);
		
		srand(0);

		for (uint8_t i= 0; i< totalNumberOfGuesses; i++)
 5dc:	8f 15       	cp	r24, r15
 5de:	08 f4       	brcc	.+2      	; 0x5e2 <main+0x138>
 5e0:	b5 cf       	rjmp	.-150    	; 0x54c <main+0xa2>
 5e2:	dd c0       	rjmp	.+442    	; 0x79e <main+0x2f4>
			DISP_clear();
			DISP_print("Your turn!");
			currentNumberOfGuesses = 0;
			while(currentNumberOfGuesses < totalNumberOfGuesses)
			{
				if (!((1<<SW1) & PINC))
 5e4:	31 99       	sbic	0x06, 1	; 6
 5e6:	18 c0       	rjmp	.+48     	; 0x618 <main+0x16e>
				{
					guesses[currentNumberOfGuesses] = 0;
 5e8:	eb e0       	ldi	r30, 0x0B	; 11
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	ec 0f       	add	r30, r28
 5ee:	fd 1f       	adc	r31, r29
 5f0:	e8 0f       	add	r30, r24
 5f2:	f1 1d       	adc	r31, r1
 5f4:	10 82       	st	Z, r1
					currentNumberOfGuesses += 1;
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
					PORTD ^= (1<<LED1);
 5f8:	9b b1       	in	r25, 0x0b	; 11
 5fa:	92 27       	eor	r25, r18
 5fc:	9b b9       	out	0x0b, r25	; 11
 5fe:	9f ef       	ldi	r25, 0xFF	; 255
 600:	e9 e6       	ldi	r30, 0x69	; 105
 602:	f8 e1       	ldi	r31, 0x18	; 24
 604:	91 50       	subi	r25, 0x01	; 1
 606:	e0 40       	sbci	r30, 0x00	; 0
 608:	f0 40       	sbci	r31, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <main+0x15a>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0x164>
 60e:	00 00       	nop
					_delay_ms(500);
					PORTD ^= (1<<LED1);
 610:	9b b1       	in	r25, 0x0b	; 11
 612:	92 27       	eor	r25, r18
 614:	9b b9       	out	0x0b, r25	; 11
 616:	33 c0       	rjmp	.+102    	; 0x67e <main+0x1d4>

				}

				else if (!((1<<SW2) & PINA))
 618:	00 99       	sbic	0x00, 0	; 0
 61a:	18 c0       	rjmp	.+48     	; 0x64c <main+0x1a2>
				{
					guesses[currentNumberOfGuesses] = 1;
 61c:	eb e0       	ldi	r30, 0x0B	; 11
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	ec 0f       	add	r30, r28
 622:	fd 1f       	adc	r31, r29
 624:	e8 0f       	add	r30, r24
 626:	f1 1d       	adc	r31, r1
 628:	30 83       	st	Z, r19
					currentNumberOfGuesses += 1;
 62a:	8f 5f       	subi	r24, 0xFF	; 255
					PORTD ^= (1<<LED2);
 62c:	9b b1       	in	r25, 0x0b	; 11
 62e:	99 25       	eor	r25, r9
 630:	9b b9       	out	0x0b, r25	; 11
 632:	4f ef       	ldi	r20, 0xFF	; 255
 634:	59 e6       	ldi	r21, 0x69	; 105
 636:	98 e1       	ldi	r25, 0x18	; 24
 638:	41 50       	subi	r20, 0x01	; 1
 63a:	50 40       	sbci	r21, 0x00	; 0
 63c:	90 40       	sbci	r25, 0x00	; 0
 63e:	e1 f7       	brne	.-8      	; 0x638 <main+0x18e>
 640:	00 c0       	rjmp	.+0      	; 0x642 <main+0x198>
 642:	00 00       	nop
					_delay_ms(500);
					PORTD ^= (1<<LED2);
 644:	9b b1       	in	r25, 0x0b	; 11
 646:	99 25       	eor	r25, r9
 648:	9b b9       	out	0x0b, r25	; 11
 64a:	19 c0       	rjmp	.+50     	; 0x67e <main+0x1d4>

				}

				else if (!((1<<SW3) & PINA))
 64c:	01 99       	sbic	0x00, 1	; 0
 64e:	17 c0       	rjmp	.+46     	; 0x67e <main+0x1d4>
				{
				guesses[currentNumberOfGuesses] = 2;
 650:	eb e0       	ldi	r30, 0x0B	; 11
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	ec 0f       	add	r30, r28
 656:	fd 1f       	adc	r31, r29
 658:	e8 0f       	add	r30, r24
 65a:	f1 1d       	adc	r31, r1
 65c:	30 82       	st	Z, r3
				currentNumberOfGuesses += 1;
 65e:	8f 5f       	subi	r24, 0xFF	; 255
					PORTA ^= (1<<LED3);
 660:	92 b1       	in	r25, 0x02	; 2
 662:	96 25       	eor	r25, r6
 664:	92 b9       	out	0x02, r25	; 2
 666:	ef ef       	ldi	r30, 0xFF	; 255
 668:	f9 e6       	ldi	r31, 0x69	; 105
 66a:	48 e1       	ldi	r20, 0x18	; 24
 66c:	e1 50       	subi	r30, 0x01	; 1
 66e:	f0 40       	sbci	r31, 0x00	; 0
 670:	40 40       	sbci	r20, 0x00	; 0
 672:	e1 f7       	brne	.-8      	; 0x66c <main+0x1c2>
 674:	00 c0       	rjmp	.+0      	; 0x676 <main+0x1cc>
 676:	00 00       	nop
					_delay_ms(500);
					PORTA ^= (1<<LED3);
 678:	92 b1       	in	r25, 0x02	; 2
 67a:	96 25       	eor	r25, r6
 67c:	92 b9       	out	0x02, r25	; 2

			}
			DISP_clear();
			DISP_print("Your turn!");
			currentNumberOfGuesses = 0;
			while(currentNumberOfGuesses < totalNumberOfGuesses)
 67e:	8f 15       	cp	r24, r15
 680:	08 f4       	brcc	.+2      	; 0x684 <main+0x1da>
 682:	b0 cf       	rjmp	.-160    	; 0x5e4 <main+0x13a>
					PORTA ^= (1<<LED3);

				}
			}

			for (uint8_t i = 0; i<currentNumberOfGuesses; i++)
 684:	88 23       	and	r24, r24
 686:	61 f0       	breq	.+24     	; 0x6a0 <main+0x1f6>
 688:	de 01       	movw	r26, r28
 68a:	1b 96       	adiw	r26, 0x0b	; 11
 68c:	e4 2d       	mov	r30, r4
 68e:	f5 2d       	mov	r31, r5
			{
				if (answers[i] != guesses[i])
 690:	21 91       	ld	r18, Z+
 692:	9d 91       	ld	r25, X+
 694:	29 13       	cpse	r18, r25
				{
					won = false;
 696:	87 2c       	mov	r8, r7
 698:	9e 2f       	mov	r25, r30
 69a:	9c 19       	sub	r25, r12
					PORTA ^= (1<<LED3);

				}
			}

			for (uint8_t i = 0; i<currentNumberOfGuesses; i++)
 69c:	98 17       	cp	r25, r24
 69e:	c0 f3       	brcs	.-16     	; 0x690 <main+0x1e6>
				}


			}

			DISP_clear();
 6a0:	0e 94 aa 01 	call	0x354	; 0x354 <DISP_clear>
			if (won)
 6a4:	88 20       	and	r8, r8
 6a6:	09 f4       	brne	.+2      	; 0x6aa <main+0x200>
 6a8:	53 c0       	rjmp	.+166    	; 0x750 <main+0x2a6>
			{
				if (totalNumberOfGuesses < numberOfRounds)
 6aa:	59 e0       	ldi	r21, 0x09	; 9
 6ac:	5f 15       	cp	r21, r15
 6ae:	f0 f0       	brcs	.+60     	; 0x6ec <main+0x242>
				{
					totalNumberOfGuesses += 1;
 6b0:	f3 94       	inc	r15
					DISP_print("Correct!");
 6b2:	86 e3       	ldi	r24, 0x36	; 54
 6b4:	96 e0       	ldi	r25, 0x06	; 6
 6b6:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
 6ba:	8f ef       	ldi	r24, 0xFF	; 255
 6bc:	93 ed       	ldi	r25, 0xD3	; 211
 6be:	e0 e3       	ldi	r30, 0x30	; 48
 6c0:	81 50       	subi	r24, 0x01	; 1
 6c2:	90 40       	sbci	r25, 0x00	; 0
 6c4:	e0 40       	sbci	r30, 0x00	; 0
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <main+0x216>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <main+0x220>
 6ca:	00 00       	nop
					_delay_ms((1000));
					DISP_clear();
 6cc:	0e 94 aa 01 	call	0x354	; 0x354 <DISP_clear>
					DISP_print("Next round");
 6d0:	8f e3       	ldi	r24, 0x3F	; 63
 6d2:	96 e0       	ldi	r25, 0x06	; 6
 6d4:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
 6d8:	ff ef       	ldi	r31, 0xFF	; 255
 6da:	23 ed       	ldi	r18, 0xD3	; 211
 6dc:	40 e3       	ldi	r20, 0x30	; 48
 6de:	f1 50       	subi	r31, 0x01	; 1
 6e0:	20 40       	sbci	r18, 0x00	; 0
 6e2:	40 40       	sbci	r20, 0x00	; 0
 6e4:	e1 f7       	brne	.-8      	; 0x6de <main+0x234>
 6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <main+0x23e>
 6e8:	00 00       	nop
 6ea:	28 c0       	rjmp	.+80     	; 0x73c <main+0x292>
					_delay_ms(1000);
				
				}
				else if (totalNumberOfGuesses == numberOfRounds)
 6ec:	5a e0       	ldi	r21, 0x0A	; 10
 6ee:	f5 12       	cpse	r15, r21
 6f0:	25 c0       	rjmp	.+74     	; 0x73c <main+0x292>
				{
					DISP_print("You won!\nYou got:\n");
 6f2:	8a e4       	ldi	r24, 0x4A	; 74
 6f4:	96 e0       	ldi	r25, 0x06	; 6
 6f6:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
					totalNumbersWhenOver = '0' + totalNumberOfGuesses;
					DISP_putc(totalNumbersWhenOver);
 6fa:	8a e3       	ldi	r24, 0x3A	; 58
 6fc:	0e 94 9f 00 	call	0x13e	; 0x13e <DISP_putc>
					DISP_print(" points.");
 700:	8d e5       	ldi	r24, 0x5D	; 93
 702:	96 e0       	ldi	r25, 0x06	; 6
 704:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	93 e2       	ldi	r25, 0x23	; 35
 70c:	e4 ef       	ldi	r30, 0xF4	; 244
 70e:	81 50       	subi	r24, 0x01	; 1
 710:	90 40       	sbci	r25, 0x00	; 0
 712:	e0 40       	sbci	r30, 0x00	; 0
 714:	e1 f7       	brne	.-8      	; 0x70e <main+0x264>
 716:	00 c0       	rjmp	.+0      	; 0x718 <main+0x26e>
 718:	00 00       	nop
					_delay_ms((5000));
					DISP_clear();
 71a:	0e 94 aa 01 	call	0x354	; 0x354 <DISP_clear>
					DISP_print("New game :)");
 71e:	86 e6       	ldi	r24, 0x66	; 102
 720:	96 e0       	ldi	r25, 0x06	; 6
 722:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
 726:	ff ef       	ldi	r31, 0xFF	; 255
 728:	27 ea       	ldi	r18, 0xA7	; 167
 72a:	41 e6       	ldi	r20, 0x61	; 97
 72c:	f1 50       	subi	r31, 0x01	; 1
 72e:	20 40       	sbci	r18, 0x00	; 0
 730:	40 40       	sbci	r20, 0x00	; 0
 732:	e1 f7       	brne	.-8      	; 0x72c <main+0x282>
 734:	00 c0       	rjmp	.+0      	; 0x736 <main+0x28c>
 736:	00 00       	nop
					_delay_ms(2000);
					totalNumberOfGuesses = 1;
 738:	ff 24       	eor	r15, r15
 73a:	f3 94       	inc	r15
 73c:	5f ef       	ldi	r21, 0xFF	; 255
 73e:	87 ea       	ldi	r24, 0xA7	; 167
 740:	91 e6       	ldi	r25, 0x61	; 97
 742:	51 50       	subi	r21, 0x01	; 1
 744:	80 40       	sbci	r24, 0x00	; 0
 746:	90 40       	sbci	r25, 0x00	; 0
 748:	e1 f7       	brne	.-8      	; 0x742 <main+0x298>
 74a:	00 c0       	rjmp	.+0      	; 0x74c <main+0x2a2>
 74c:	00 00       	nop
 74e:	e3 ce       	rjmp	.-570    	; 0x516 <main+0x6c>
				
				_delay_ms(2000);
			}
			else
			{
			DISP_print("You lost!\nYou got:\n");
 750:	82 e7       	ldi	r24, 0x72	; 114
 752:	96 e0       	ldi	r25, 0x06	; 6
 754:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
			totalNumbersWhenOver = '0' + totalNumberOfGuesses - 1;
			//totalNumbersWhenOver -= 1;
			DISP_putc(totalNumbersWhenOver);
 758:	8f e2       	ldi	r24, 0x2F	; 47
 75a:	8f 0d       	add	r24, r15
 75c:	0e 94 9f 00 	call	0x13e	; 0x13e <DISP_putc>
			DISP_print(" points.");
 760:	8d e5       	ldi	r24, 0x5D	; 93
 762:	96 e0       	ldi	r25, 0x06	; 6
 764:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
 768:	ef ef       	ldi	r30, 0xFF	; 255
 76a:	f3 e2       	ldi	r31, 0x23	; 35
 76c:	24 ef       	ldi	r18, 0xF4	; 244
 76e:	e1 50       	subi	r30, 0x01	; 1
 770:	f0 40       	sbci	r31, 0x00	; 0
 772:	20 40       	sbci	r18, 0x00	; 0
 774:	e1 f7       	brne	.-8      	; 0x76e <main+0x2c4>
 776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x2ce>
 778:	00 00       	nop
			_delay_ms(5000);
			DISP_clear();
 77a:	0e 94 aa 01 	call	0x354	; 0x354 <DISP_clear>
			DISP_print("New game");
 77e:	86 e8       	ldi	r24, 0x86	; 134
 780:	96 e0       	ldi	r25, 0x06	; 6
 782:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
 786:	4f ef       	ldi	r20, 0xFF	; 255
 788:	57 ea       	ldi	r21, 0xA7	; 167
 78a:	81 e6       	ldi	r24, 0x61	; 97
 78c:	41 50       	subi	r20, 0x01	; 1
 78e:	50 40       	sbci	r21, 0x00	; 0
 790:	80 40       	sbci	r24, 0x00	; 0
 792:	e1 f7       	brne	.-8      	; 0x78c <main+0x2e2>
 794:	00 c0       	rjmp	.+0      	; 0x796 <main+0x2ec>
 796:	00 00       	nop
			_delay_ms(2000);
			totalNumberOfGuesses = 1;
 798:	ff 24       	eor	r15, r15
 79a:	f3 94       	inc	r15
 79c:	bc ce       	rjmp	.-648    	; 0x516 <main+0x6c>
			}
				_delay_ms(500);


			}
			DISP_clear();
 79e:	0e 94 aa 01 	call	0x354	; 0x354 <DISP_clear>
			DISP_print("Your turn!");
 7a2:	8f e8       	ldi	r24, 0x8F	; 143
 7a4:	96 e0       	ldi	r25, 0x06	; 6
 7a6:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
 7aa:	82 2d       	mov	r24, r2

				}

				else if (!((1<<SW2) & PINA))
				{
					guesses[currentNumberOfGuesses] = 1;
 7ac:	31 e0       	ldi	r19, 0x01	; 1
			{
				if (!((1<<SW1) & PINC))
				{
					guesses[currentNumberOfGuesses] = 0;
					currentNumberOfGuesses += 1;
					PORTD ^= (1<<LED1);
 7ae:	20 e2       	ldi	r18, 0x20	; 32
 7b0:	19 cf       	rjmp	.-462    	; 0x5e4 <main+0x13a>
			}
				_delay_ms(500);


			}
			DISP_clear();
 7b2:	0e 94 aa 01 	call	0x354	; 0x354 <DISP_clear>
			DISP_print("Your turn!");
 7b6:	8f e8       	ldi	r24, 0x8F	; 143
 7b8:	96 e0       	ldi	r25, 0x06	; 6
 7ba:	0e 94 9b 01 	call	0x336	; 0x336 <DISP_print>
 7be:	70 cf       	rjmp	.-288    	; 0x6a0 <main+0x1f6>

000007c0 <SPI_MasterInit>:
{
    // Initialize the SPI port as master
    // You will need to set MOSI, SCK, SS (slave select) as outputs
    //
    // CODE GOES HERE
	DDRB = (1<<MOSI)|(1<<SCK) | (1<<SS0);
 7c0:	80 eb       	ldi	r24, 0xB0	; 176
 7c2:	84 b9       	out	0x04, r24	; 4

    // Now enable SPI, Master and set clock rate
    //
    // CODE GOES HERE

	SPCR0 = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 7c4:	81 e5       	ldi	r24, 0x51	; 81
 7c6:	8c bd       	out	0x2c, r24	; 44
 7c8:	08 95       	ret

000007ca <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
    // First select the correct slave by setting the slave select (SS) bit LOW
    //
    PORTB &= ~(1<<SS0);
 7ca:	2c 98       	cbi	0x05, 4	; 5


    // Then start the transmission by assigning the data to the SPI data register
    //
    SPDR0 = cData;
 7cc:	8e bd       	out	0x2e, r24	; 46


    // Now wait for the data transmission to complete by periodically checking the SPI status register
    //
    while(!(SPSR0 & (1<<SPIF)));
 7ce:	0d b4       	in	r0, 0x2d	; 45
 7d0:	07 fe       	sbrs	r0, 7
 7d2:	fd cf       	rjmp	.-6      	; 0x7ce <SPI_MasterTransmit+0x4>


    // Finally set the slave select bit HIGH before leaving the function
    //
    PORTB |= 1<<SS0;
 7d4:	2c 9a       	sbi	0x05, 4	; 5
 7d6:	08 95       	ret

000007d8 <__divmodhi4>:
 7d8:	97 fb       	bst	r25, 7
 7da:	07 2e       	mov	r0, r23
 7dc:	16 f4       	brtc	.+4      	; 0x7e2 <__divmodhi4+0xa>
 7de:	00 94       	com	r0
 7e0:	07 d0       	rcall	.+14     	; 0x7f0 <__divmodhi4_neg1>
 7e2:	77 fd       	sbrc	r23, 7
 7e4:	09 d0       	rcall	.+18     	; 0x7f8 <__divmodhi4_neg2>
 7e6:	0e 94 00 04 	call	0x800	; 0x800 <__udivmodhi4>
 7ea:	07 fc       	sbrc	r0, 7
 7ec:	05 d0       	rcall	.+10     	; 0x7f8 <__divmodhi4_neg2>
 7ee:	3e f4       	brtc	.+14     	; 0x7fe <__divmodhi4_exit>

000007f0 <__divmodhi4_neg1>:
 7f0:	90 95       	com	r25
 7f2:	81 95       	neg	r24
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	08 95       	ret

000007f8 <__divmodhi4_neg2>:
 7f8:	70 95       	com	r23
 7fa:	61 95       	neg	r22
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255

000007fe <__divmodhi4_exit>:
 7fe:	08 95       	ret

00000800 <__udivmodhi4>:
 800:	aa 1b       	sub	r26, r26
 802:	bb 1b       	sub	r27, r27
 804:	51 e1       	ldi	r21, 0x11	; 17
 806:	07 c0       	rjmp	.+14     	; 0x816 <__udivmodhi4_ep>

00000808 <__udivmodhi4_loop>:
 808:	aa 1f       	adc	r26, r26
 80a:	bb 1f       	adc	r27, r27
 80c:	a6 17       	cp	r26, r22
 80e:	b7 07       	cpc	r27, r23
 810:	10 f0       	brcs	.+4      	; 0x816 <__udivmodhi4_ep>
 812:	a6 1b       	sub	r26, r22
 814:	b7 0b       	sbc	r27, r23

00000816 <__udivmodhi4_ep>:
 816:	88 1f       	adc	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	5a 95       	dec	r21
 81c:	a9 f7       	brne	.-22     	; 0x808 <__udivmodhi4_loop>
 81e:	80 95       	com	r24
 820:	90 95       	com	r25
 822:	bc 01       	movw	r22, r24
 824:	cd 01       	movw	r24, r26
 826:	08 95       	ret

00000828 <do_rand>:
 828:	8f 92       	push	r8
 82a:	9f 92       	push	r9
 82c:	af 92       	push	r10
 82e:	bf 92       	push	r11
 830:	cf 92       	push	r12
 832:	df 92       	push	r13
 834:	ef 92       	push	r14
 836:	ff 92       	push	r15
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	ec 01       	movw	r28, r24
 83e:	68 81       	ld	r22, Y
 840:	79 81       	ldd	r23, Y+1	; 0x01
 842:	8a 81       	ldd	r24, Y+2	; 0x02
 844:	9b 81       	ldd	r25, Y+3	; 0x03
 846:	61 15       	cp	r22, r1
 848:	71 05       	cpc	r23, r1
 84a:	81 05       	cpc	r24, r1
 84c:	91 05       	cpc	r25, r1
 84e:	21 f4       	brne	.+8      	; 0x858 <do_rand+0x30>
 850:	64 e2       	ldi	r22, 0x24	; 36
 852:	79 ed       	ldi	r23, 0xD9	; 217
 854:	8b e5       	ldi	r24, 0x5B	; 91
 856:	97 e0       	ldi	r25, 0x07	; 7
 858:	2d e1       	ldi	r18, 0x1D	; 29
 85a:	33 ef       	ldi	r19, 0xF3	; 243
 85c:	41 e0       	ldi	r20, 0x01	; 1
 85e:	50 e0       	ldi	r21, 0x00	; 0
 860:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__divmodsi4>
 864:	49 01       	movw	r8, r18
 866:	5a 01       	movw	r10, r20
 868:	9b 01       	movw	r18, r22
 86a:	ac 01       	movw	r20, r24
 86c:	a7 ea       	ldi	r26, 0xA7	; 167
 86e:	b1 e4       	ldi	r27, 0x41	; 65
 870:	0e 94 8f 04 	call	0x91e	; 0x91e <__muluhisi3>
 874:	6b 01       	movw	r12, r22
 876:	7c 01       	movw	r14, r24
 878:	ac ee       	ldi	r26, 0xEC	; 236
 87a:	b4 ef       	ldi	r27, 0xF4	; 244
 87c:	a5 01       	movw	r20, r10
 87e:	94 01       	movw	r18, r8
 880:	0e 94 9d 04 	call	0x93a	; 0x93a <__mulohisi3>
 884:	dc 01       	movw	r26, r24
 886:	cb 01       	movw	r24, r22
 888:	8c 0d       	add	r24, r12
 88a:	9d 1d       	adc	r25, r13
 88c:	ae 1d       	adc	r26, r14
 88e:	bf 1d       	adc	r27, r15
 890:	b7 ff       	sbrs	r27, 7
 892:	03 c0       	rjmp	.+6      	; 0x89a <do_rand+0x72>
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	a1 09       	sbc	r26, r1
 898:	b0 48       	sbci	r27, 0x80	; 128
 89a:	88 83       	st	Y, r24
 89c:	99 83       	std	Y+1, r25	; 0x01
 89e:	aa 83       	std	Y+2, r26	; 0x02
 8a0:	bb 83       	std	Y+3, r27	; 0x03
 8a2:	9f 77       	andi	r25, 0x7F	; 127
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	ff 90       	pop	r15
 8aa:	ef 90       	pop	r14
 8ac:	df 90       	pop	r13
 8ae:	cf 90       	pop	r12
 8b0:	bf 90       	pop	r11
 8b2:	af 90       	pop	r10
 8b4:	9f 90       	pop	r9
 8b6:	8f 90       	pop	r8
 8b8:	08 95       	ret

000008ba <rand_r>:
 8ba:	0e 94 14 04 	call	0x828	; 0x828 <do_rand>
 8be:	08 95       	ret

000008c0 <rand>:
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	91 e0       	ldi	r25, 0x01	; 1
 8c4:	0e 94 14 04 	call	0x828	; 0x828 <do_rand>
 8c8:	08 95       	ret

000008ca <srand>:
 8ca:	a0 e0       	ldi	r26, 0x00	; 0
 8cc:	b0 e0       	ldi	r27, 0x00	; 0
 8ce:	80 93 00 01 	sts	0x0100, r24
 8d2:	90 93 01 01 	sts	0x0101, r25
 8d6:	a0 93 02 01 	sts	0x0102, r26
 8da:	b0 93 03 01 	sts	0x0103, r27
 8de:	08 95       	ret

000008e0 <__divmodsi4>:
 8e0:	05 2e       	mov	r0, r21
 8e2:	97 fb       	bst	r25, 7
 8e4:	1e f4       	brtc	.+6      	; 0x8ec <__divmodsi4+0xc>
 8e6:	00 94       	com	r0
 8e8:	0e 94 87 04 	call	0x90e	; 0x90e <__negsi2>
 8ec:	57 fd       	sbrc	r21, 7
 8ee:	07 d0       	rcall	.+14     	; 0x8fe <__divmodsi4_neg2>
 8f0:	0e 94 a2 04 	call	0x944	; 0x944 <__udivmodsi4>
 8f4:	07 fc       	sbrc	r0, 7
 8f6:	03 d0       	rcall	.+6      	; 0x8fe <__divmodsi4_neg2>
 8f8:	4e f4       	brtc	.+18     	; 0x90c <__divmodsi4_exit>
 8fa:	0c 94 87 04 	jmp	0x90e	; 0x90e <__negsi2>

000008fe <__divmodsi4_neg2>:
 8fe:	50 95       	com	r21
 900:	40 95       	com	r20
 902:	30 95       	com	r19
 904:	21 95       	neg	r18
 906:	3f 4f       	sbci	r19, 0xFF	; 255
 908:	4f 4f       	sbci	r20, 0xFF	; 255
 90a:	5f 4f       	sbci	r21, 0xFF	; 255

0000090c <__divmodsi4_exit>:
 90c:	08 95       	ret

0000090e <__negsi2>:
 90e:	90 95       	com	r25
 910:	80 95       	com	r24
 912:	70 95       	com	r23
 914:	61 95       	neg	r22
 916:	7f 4f       	sbci	r23, 0xFF	; 255
 918:	8f 4f       	sbci	r24, 0xFF	; 255
 91a:	9f 4f       	sbci	r25, 0xFF	; 255
 91c:	08 95       	ret

0000091e <__muluhisi3>:
 91e:	0e 94 c4 04 	call	0x988	; 0x988 <__umulhisi3>
 922:	a5 9f       	mul	r26, r21
 924:	90 0d       	add	r25, r0
 926:	b4 9f       	mul	r27, r20
 928:	90 0d       	add	r25, r0
 92a:	a4 9f       	mul	r26, r20
 92c:	80 0d       	add	r24, r0
 92e:	91 1d       	adc	r25, r1
 930:	11 24       	eor	r1, r1
 932:	08 95       	ret

00000934 <__mulshisi3>:
 934:	b7 ff       	sbrs	r27, 7
 936:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__muluhisi3>

0000093a <__mulohisi3>:
 93a:	0e 94 8f 04 	call	0x91e	; 0x91e <__muluhisi3>
 93e:	82 1b       	sub	r24, r18
 940:	93 0b       	sbc	r25, r19
 942:	08 95       	ret

00000944 <__udivmodsi4>:
 944:	a1 e2       	ldi	r26, 0x21	; 33
 946:	1a 2e       	mov	r1, r26
 948:	aa 1b       	sub	r26, r26
 94a:	bb 1b       	sub	r27, r27
 94c:	fd 01       	movw	r30, r26
 94e:	0d c0       	rjmp	.+26     	; 0x96a <__udivmodsi4_ep>

00000950 <__udivmodsi4_loop>:
 950:	aa 1f       	adc	r26, r26
 952:	bb 1f       	adc	r27, r27
 954:	ee 1f       	adc	r30, r30
 956:	ff 1f       	adc	r31, r31
 958:	a2 17       	cp	r26, r18
 95a:	b3 07       	cpc	r27, r19
 95c:	e4 07       	cpc	r30, r20
 95e:	f5 07       	cpc	r31, r21
 960:	20 f0       	brcs	.+8      	; 0x96a <__udivmodsi4_ep>
 962:	a2 1b       	sub	r26, r18
 964:	b3 0b       	sbc	r27, r19
 966:	e4 0b       	sbc	r30, r20
 968:	f5 0b       	sbc	r31, r21

0000096a <__udivmodsi4_ep>:
 96a:	66 1f       	adc	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	1a 94       	dec	r1
 974:	69 f7       	brne	.-38     	; 0x950 <__udivmodsi4_loop>
 976:	60 95       	com	r22
 978:	70 95       	com	r23
 97a:	80 95       	com	r24
 97c:	90 95       	com	r25
 97e:	9b 01       	movw	r18, r22
 980:	ac 01       	movw	r20, r24
 982:	bd 01       	movw	r22, r26
 984:	cf 01       	movw	r24, r30
 986:	08 95       	ret

00000988 <__umulhisi3>:
 988:	a2 9f       	mul	r26, r18
 98a:	b0 01       	movw	r22, r0
 98c:	b3 9f       	mul	r27, r19
 98e:	c0 01       	movw	r24, r0
 990:	a3 9f       	mul	r26, r19
 992:	70 0d       	add	r23, r0
 994:	81 1d       	adc	r24, r1
 996:	11 24       	eor	r1, r1
 998:	91 1d       	adc	r25, r1
 99a:	b2 9f       	mul	r27, r18
 99c:	70 0d       	add	r23, r0
 99e:	81 1d       	adc	r24, r1
 9a0:	11 24       	eor	r1, r1
 9a2:	91 1d       	adc	r25, r1
 9a4:	08 95       	ret

000009a6 <_exit>:
 9a6:	f8 94       	cli

000009a8 <__stop_program>:
 9a8:	ff cf       	rjmp	.-2      	; 0x9a8 <__stop_program>
