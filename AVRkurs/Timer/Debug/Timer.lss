
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a8  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000006b  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000c2  00000000  00000000  00000357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000148  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000005f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_13>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  dc:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <main>:
		First set up the LEDs like in the previous exercise. You can either copy paste from the previous exercise or start fresh
		The timer used in this exercise is timer1, find out which LEDs it is connected to
	*/
	
	//Enable LEDs as output
	DDRD |= (1<<LED1) | (1<<LED2);
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 63       	ori	r24, 0x30	; 48
  e8:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1 << LED0);
  ea:	3f 9a       	sbi	0x07, 7	; 7
	DDRA |= (1<<LED3);
  ec:	0b 9a       	sbi	0x01, 3	; 1

	//Turn LEDs default off
	PORTD |=(1<<LED1) | (1<<LED2);
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 63       	ori	r24, 0x30	; 48
  f2:	8b b9       	out	0x0b, r24	; 11
	PORTC |= (1 << LED0);
  f4:	47 9a       	sbi	0x08, 7	; 8
	PORTA |=(1<<LED3);
  f6:	13 9a       	sbi	0x02, 3	; 2
			
	/*	We use clear timer on compare match (ctc) mode and set the prescaler to clk=clk/256
		This is accomplished by setting the right bits in the timer control registers A and B, see the datasheet
	*/
	//TCCR1A |= (1<<COMA1);
	TCCR1B |= (1<<CS2) | (1<<WGM2);
  f8:	e1 e8       	ldi	r30, 0x81	; 129
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8c 60       	ori	r24, 0x0C	; 12
 100:	80 83       	st	Z, r24

	/*	To be able to react to interrupts from module, the mega has to enable interrupts globally.
		This is done via the function sei(), which is located in the (already included) header file <avr/interrupt.h>
		Note that this step is NOT the same as the previous, where we enabled interrupts for the timer module.
	*/
	TIMSK1 |= (1<<OCIEA);
 102:	ef e6       	ldi	r30, 0x6F	; 111
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24

	sei();
 10c:	78 94       	sei
		frequency with which the timer will overflow(it will be the timers new TOP value).
		When everything is working, try to modify this value and observe how this change affects the period.
		Which value of the output compare register will make our uC interrupt each 1/2s?
	*/ 
	
	OCRA = 62500;
 10e:	84 e2       	ldi	r24, 0x24	; 36
 110:	94 ef       	ldi	r25, 0xF4	; 244
 112:	90 93 89 00 	sts	0x0089, r25
 116:	80 93 88 00 	sts	0x0088, r24
	/* NOTE: remember to fill in the ISR in the bottom of the file, else nothing will happen */
	
    while(1)
    {
        //Do nothing, the code in the ISR will execute periodically without any involvement of the main() loop. 
    }
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0x36>

0000011c <__vector_13>:
}

ISR (TIMER1_COMPA_vect){
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
		PORTD ^=(1<<LED1);
 12a:	9b b1       	in	r25, 0x0b	; 11
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	89 27       	eor	r24, r25
 130:	8b b9       	out	0x0b, r24	; 11
		PORTD ^= (1<<LED2);
 132:	9b b1       	in	r25, 0x0b	; 11
 134:	80 e1       	ldi	r24, 0x10	; 16
 136:	89 27       	eor	r24, r25
 138:	8b b9       	out	0x0b, r24	; 11
		PORTA ^= (1>>LED1);
 13a:	82 b1       	in	r24, 0x02	; 2
 13c:	82 b9       	out	0x02, r24	; 2
		PORTC ^= (1<<LED0);
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	80 58       	subi	r24, 0x80	; 128
 142:	88 b9       	out	0x08, r24	; 8

}	
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
